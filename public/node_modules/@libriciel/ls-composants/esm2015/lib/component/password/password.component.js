/**
 * @fileoverview added by tsickle
 * Generated from: lib/component/password/password.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, forwardRef, Input, Renderer2, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export class PasswordComponent {
    /**
     * @param {?} element
     * @param {?} renderer2
     */
    constructor(element, renderer2) {
        this.element = element;
        this.renderer2 = renderer2;
        this.showIcon = true;
        this.trim = false;
        this.isShown = false;
        this.onChange = (/**
         * @return {?}
         */
        () => {
            // tslint:disable-next-line:semicolon
        });
        this.onTouched = (/**
         * @return {?}
         */
        () => {
            // tslint:disable-next-line:semicolon
        });
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        if (this.trim) {
            this._value = value.trim();
        }
        else {
            this._value = value;
        }
        this.onChange(this._value);
        this.onTouched();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        const id = this.element.nativeElement.getAttribute('id');
        this.renderer2.removeAttribute(this.element.nativeElement, 'id');
        this.renderer2.setAttribute(this.input.nativeElement, 'id', id);
    }
    /**
     * @return {?}
     */
    togglePassword() {
        this.isShown = !this.isShown;
    }
    /**
     * @return {?}
     */
    onChangeSelection() {
        this.onChange(this._value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value) {
            this.value = value;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    trimValue(event) {
        if (this.trim) {
            event.target.value = event.target.value.trim();
        }
    }
}
PasswordComponent.decorators = [
    { type: Component, args: [{
                selector: 'ls-password',
                template: "<div class=\"form-group input-group-front-icon\" [class.input-group-front-icon]=\"showIcon\">\n  <span *ngIf=\"showIcon\">\n    <i class=\"fa fa-lock\"></i>\n  </span>\n  <input #input [attr.name]=\"name\" [(ngModel)]=\"value\" (ngModelChange)=\"onChangeSelection()\" [required]=\"required\"\n         class=\"form-control\" [type]=\"isShown ? 'text' : 'password'\" (keyup)=\"trimValue($event)\">\n\n  <span class=\"input-icon\" (click)=\"togglePassword()\">\n    <i class=\"fa\" [ngClass]=\"isShown ? 'fa-eye-slash' : 'fa-eye'\"></i>\n  </span>\n</div>\n\n\n\n\n\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => PasswordComponent)),
                        multi: true
                    }
                ],
                styles: [".input-icon{-ms-flex-align:center;-ms-flex-pack:center;-webkit-box-align:center;-webkit-box-pack:center;align-items:center;background-color:transparent;border-radius:5px 0 0 5px;color:var(--ls-grey-500);cursor:pointer;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;height:99%;justify-content:center;position:absolute;right:0;top:0;width:40px}.input-icon:hover{color:var(--ls-grey-700)}.input-group-end-icon,:host.input-group-end-icon{display:-webkit-box;display:-ms-flexbox;display:flex;position:relative}.input-group-end-icon input,:host.input-group-end-icon input{padding-right:36px}input.ls-action-input{cursor:pointer}.input-group.input-group-end-icon .input-icon,:host.input-group.input-group-end-icon .input-icon{z-index:3}.form-group{position:relative}input::-ms-clear,input::-ms-reveal{display:none}"]
            }] }
];
/** @nocollapse */
PasswordComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
PasswordComponent.propDecorators = {
    showIcon: [{ type: Input }],
    required: [{ type: Input }],
    trim: [{ type: Input }],
    input: [{ type: ViewChild, args: ['input',] }],
    name: [{ type: Input }],
    _value: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    PasswordComponent.prototype.showIcon;
    /** @type {?} */
    PasswordComponent.prototype.required;
    /** @type {?} */
    PasswordComponent.prototype.trim;
    /** @type {?} */
    PasswordComponent.prototype.input;
    /** @type {?} */
    PasswordComponent.prototype.name;
    /** @type {?} */
    PasswordComponent.prototype.isShown;
    /** @type {?} */
    PasswordComponent.prototype._value;
    /** @type {?} */
    PasswordComponent.prototype.onChange;
    /** @type {?} */
    PasswordComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    PasswordComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    PasswordComponent.prototype.renderer2;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Ii9idWlsZHMvb3V0aWxzL2NoYXJ0ZWdyYXBoaXF1ZS9saWJyYWlyaWUtYW5ndWxhci9saWIvc3JjLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudC9wYXNzd29yZC9wYXNzd29yZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQWlCLFNBQVMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlHLE9BQU8sRUFBd0IsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQWN6RSxNQUFNLE9BQU8saUJBQWlCOzs7OztJQVM1QixZQUFvQixPQUFtQixFQUFVLFNBQW9CO1FBQWpELFlBQU8sR0FBUCxPQUFPLENBQVk7UUFBVSxjQUFTLEdBQVQsU0FBUyxDQUFXO1FBUDVELGFBQVEsR0FBRyxJQUFJLENBQUM7UUFFaEIsU0FBSSxHQUFHLEtBQUssQ0FBQztRQUd0QixZQUFPLEdBQUcsS0FBSyxDQUFDO1FBK0JoQixhQUFROzs7UUFBUSxHQUFHLEVBQUU7WUFDbkIscUNBQXFDO1FBQ3ZDLENBQUMsRUFBQztRQUVGLGNBQVM7OztRQUFRLEdBQUcsRUFBRTtZQUNwQixxQ0FBcUM7UUFDdkMsQ0FBQyxFQUFDO0lBbENGLENBQUM7Ozs7SUFJRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQzs7Ozs7SUFFRCxJQUFJLEtBQUssQ0FBQyxLQUFLO1FBQ2IsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2IsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDNUI7YUFBTTtZQUNMLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1NBQ3JCO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ25CLENBQUM7Ozs7SUFFRCxlQUFlOztjQUNQLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO1FBQ3hELElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2pFLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNsRSxDQUFDOzs7O0lBRUQsY0FBYztRQUNaLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQy9CLENBQUM7Ozs7SUFXRCxpQkFBaUI7UUFDZixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM3QixDQUFDOzs7OztJQUVELGdCQUFnQixDQUFDLEVBQUU7UUFDakIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDckIsQ0FBQzs7Ozs7SUFFRCxpQkFBaUIsQ0FBQyxFQUFFO1FBQ2xCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7Ozs7O0lBRUQsVUFBVSxDQUFDLEtBQUs7UUFDZCxJQUFJLEtBQUssRUFBRTtZQUNULElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQzs7Ozs7SUFFRCxTQUFTLENBQUMsS0FBSztRQUNiLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNiLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ2hEO0lBQ0gsQ0FBQzs7O1lBakZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsYUFBYTtnQkFDdkIsaWtCQUF3QztnQkFFeEMsU0FBUyxFQUFFO29CQUNUO3dCQUNFLE9BQU8sRUFBRSxpQkFBaUI7d0JBQzFCLFdBQVcsRUFBRSxVQUFVOzs7d0JBQUMsR0FBRyxFQUFFLENBQUMsaUJBQWlCLEVBQUM7d0JBQ2hELEtBQUssRUFBRSxJQUFJO3FCQUNaO2lCQUNGOzthQUNGOzs7O1lBZGtDLFVBQVU7WUFBcUIsU0FBUzs7O3VCQWlCeEUsS0FBSzt1QkFDTCxLQUFLO21CQUNMLEtBQUs7b0JBQ0wsU0FBUyxTQUFDLE9BQU87bUJBQ2pCLEtBQUs7cUJBTUwsS0FBSzs7OztJQVZOLHFDQUF5Qjs7SUFDekIscUNBQTJCOztJQUMzQixpQ0FBc0I7O0lBQ3RCLGtDQUEwQjs7SUFDMUIsaUNBQWM7O0lBQ2Qsb0NBQWdCOztJQUtoQixtQ0FBZ0I7O0lBMEJoQixxQ0FFRTs7SUFFRixzQ0FFRTs7Ozs7SUFuQ1Usb0NBQTJCOzs7OztJQUFFLHNDQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgZm9yd2FyZFJlZiwgSW5wdXQsIFJlbmRlcmVyMiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2xzLXBhc3N3b3JkJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3Bhc3N3b3JkLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vcGFzc3dvcmQuY29tcG9uZW50LnNjc3MnXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBQYXNzd29yZENvbXBvbmVudCksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgUGFzc3dvcmRDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgQWZ0ZXJWaWV3SW5pdCB7XG5cbiAgQElucHV0KCkgc2hvd0ljb24gPSB0cnVlO1xuICBASW5wdXQoKSByZXF1aXJlZDogYm9vbGVhbjtcbiAgQElucHV0KCkgdHJpbSA9IGZhbHNlO1xuICBAVmlld0NoaWxkKCdpbnB1dCcpIGlucHV0O1xuICBASW5wdXQoKSBuYW1lO1xuICBpc1Nob3duID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyMjogUmVuZGVyZXIyKSB7XG4gIH1cblxuICBASW5wdXQoKSBfdmFsdWU7XG5cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuXG4gIHNldCB2YWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0aGlzLnRyaW0pIHtcbiAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWUudHJpbSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICB0aGlzLm9uQ2hhbmdlKHRoaXMuX3ZhbHVlKTtcbiAgICB0aGlzLm9uVG91Y2hlZCgpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIGNvbnN0IGlkID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgIHRoaXMucmVuZGVyZXIyLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ2lkJyk7XG4gICAgdGhpcy5yZW5kZXJlcjIuc2V0QXR0cmlidXRlKHRoaXMuaW5wdXQubmF0aXZlRWxlbWVudCwgJ2lkJywgaWQpO1xuICB9XG5cbiAgdG9nZ2xlUGFzc3dvcmQoKSB7XG4gICAgdGhpcy5pc1Nob3duID0gIXRoaXMuaXNTaG93bjtcbiAgfVxuXG4gIG9uQ2hhbmdlOiBhbnkgPSAoKSA9PiB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnNlbWljb2xvblxuICB9O1xuXG4gIG9uVG91Y2hlZDogYW55ID0gKCkgPT4ge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzZW1pY29sb25cbiAgfTtcblxuXG4gIG9uQ2hhbmdlU2VsZWN0aW9uKCkge1xuICAgIHRoaXMub25DaGFuZ2UodGhpcy5fdmFsdWUpO1xuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbikge1xuICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcbiAgfVxuXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKGZuKSB7XG4gICAgdGhpcy5vblRvdWNoZWQgPSBmbjtcbiAgfVxuXG4gIHdyaXRlVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICB0cmltVmFsdWUoZXZlbnQpIHtcbiAgICBpZiAodGhpcy50cmltKSB7XG4gICAgICBldmVudC50YXJnZXQudmFsdWUgPSBldmVudC50YXJnZXQudmFsdWUudHJpbSgpO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=