/**
 * @fileoverview added by tsickle
 * Generated from: lib/component/libersign/libersign.applet.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { LibersignUtil } from './libersign.util';
var LibersignAppletUtil = /** @class */ (function (_super) {
    tslib_1.__extends(LibersignAppletUtil, _super);
    function LibersignAppletUtil(zone) {
        var _this = _super.call(this) || this;
        _this.zone = zone;
        return _this;
    }
    /**
     * @param {?} updateUrl
     * @param {?} appletUrl
     * @return {?}
     */
    LibersignAppletUtil.prototype.init = /**
     * @param {?} updateUrl
     * @param {?} appletUrl
     * @return {?}
     */
    function (updateUrl, appletUrl) {
        var _this = this;
        this.status.appletLoading = true;
        this.appletElement = document.getElementById('appletLibersign');
        if (this.appletElement == null) {
            /** @type {?} */
            var appletElement = document.createElement('div');
            appletElement.id = 'appletLibersign';
            document.body.appendChild(appletElement);
            this.appletElement = document.getElementById('appletLibersign');
            // @ts-ignore
            window.appletIsLoaded = (/**
             * @return {?}
             */
            function () {
                _this.zone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.status.appletLoading = false;
                    _this.status.certsLoading = true;
                    _this.loadCertificates();
                }));
                _this.selectCertificate(_this.favorite);
            });
            this.appletElement.innerHTML = "\n<applet codebase=\"" + appletUrl + "\" id=\"liberSignApplet\" code=\"org/adullact/parapheur/applets/splittedsign/Main.class\" archive=\"SplittedSignatureApplet.jar\" name=\"Signature i-Parapheur\" height=\"0\" width=\"100%\">\n  <param name=\"permissions\" value=\"all-permissions\">\n  <param name=\"codebase_lookup\" value=\"true\">\n  <param name=\"display_cancel\" value=\"true\">\n  <param name=\"cancel_mode\" value=\"javascript\">\n</applet>";
        }
        else {
            this.zone.run((/**
             * @return {?}
             */
            function () {
                _this.status.appletLoading = false;
                _this.status.certsLoading = true;
                _this.loadCertificates();
            }));
            this.selectCertificate(this.favorite);
        }
    };
    /**
     * @return {?}
     */
    LibersignAppletUtil.prototype.loadCertificates = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var appletElement = document.getElementById('liberSignApplet');
        if (appletElement != null) {
            // @ts-ignore
            /** @type {?} */
            var certStr = document.getElementById('liberSignApplet').getCertificates();
            this.certificates = JSON.parse(certStr)['certs'];
            this.commonLoadCert();
        }
    };
    /**
     * @param {?} cert
     * @return {?}
     */
    LibersignAppletUtil.prototype.selectCertificate = /**
     * @param {?} cert
     * @return {?}
     */
    function (cert) {
        var _this = this;
        this.zone.run((/**
         * @return {?}
         */
        function () {
            _this.currentCert = cert;
        }));
    };
    /**
     * @param {?} dataToSign
     * @return {?}
     */
    LibersignAppletUtil.prototype.doSign = /**
     * @param {?} dataToSign
     * @return {?}
     */
    function (dataToSign) {
        var _this = this;
        // @ts-ignore
        /** @type {?} */
        var signatureValue = document.getElementById('liberSignApplet').sign(this.currentCert.ID, dataToSign);
        this.zone.run((/**
         * @return {?}
         */
        function () {
            _this.signatures.next(JSON.parse(signatureValue));
        }));
    };
    /**
     * @return {?}
     */
    LibersignAppletUtil.prototype.destroy = /**
     * @return {?}
     */
    function () {
        // @ts-ignore
    };
    return LibersignAppletUtil;
}(LibersignUtil));
export { LibersignAppletUtil };
if (false) {
    /** @type {?} */
    LibersignAppletUtil.prototype.appletElement;
    /**
     * @type {?}
     * @private
     */
    LibersignAppletUtil.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliZXJzaWduLmFwcGxldC51dGlsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGxpYnJpY2llbC9scy1jb21wb3NhbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudC9saWJlcnNpZ24vbGliZXJzaWduLmFwcGxldC51dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUkvQztJQUF5QywrQ0FBYTtJQUdwRCw2QkFBb0IsSUFBWTtRQUFoQyxZQUNFLGlCQUFPLFNBQ1I7UUFGbUIsVUFBSSxHQUFKLElBQUksQ0FBUTs7SUFFaEMsQ0FBQzs7Ozs7O0lBRUQsa0NBQUk7Ozs7O0lBQUosVUFBSyxTQUFpQixFQUFFLFNBQWlCO1FBQXpDLGlCQW1DQztRQWxDQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7UUFDakMsSUFBSSxDQUFDLGFBQWEsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDaEUsSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksRUFBRTs7Z0JBQ3hCLGFBQWEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztZQUNuRCxhQUFhLENBQUMsRUFBRSxHQUFHLGlCQUFpQixDQUFDO1lBQ3JDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRXpDLElBQUksQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBRWhFLGFBQWE7WUFDYixNQUFNLENBQUMsY0FBYzs7O1lBQUc7Z0JBQ3RCLEtBQUksQ0FBQyxJQUFJLENBQUMsR0FBRzs7O2dCQUFDO29CQUNaLEtBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztvQkFDbEMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO29CQUNoQyxLQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztnQkFDMUIsQ0FBQyxFQUFDLENBQUM7Z0JBQ0gsS0FBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN4QyxDQUFDLENBQUEsQ0FBQztZQUVGLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxHQUFHLDBCQUNqQixTQUFTLGlhQUtuQixDQUFDO1NBQ047YUFBTTtZQUNMLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRzs7O1lBQUM7Z0JBQ1osS0FBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO2dCQUNsQyxLQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7Z0JBQ2hDLEtBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQzFCLENBQUMsRUFBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUN2QztJQUNILENBQUM7Ozs7SUFFRCw4Q0FBZ0I7OztJQUFoQjs7WUFDUSxhQUFhLEdBQUksUUFBUSxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQztRQUNqRSxJQUFJLGFBQWEsSUFBSSxJQUFJLEVBQUU7OztnQkFFbkIsT0FBTyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxlQUFlLEVBQUU7WUFDNUUsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2pELElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUN2QjtJQUNILENBQUM7Ozs7O0lBRUQsK0NBQWlCOzs7O0lBQWpCLFVBQWtCLElBQTBCO1FBQTVDLGlCQUlDO1FBSEMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHOzs7UUFBQztZQUNaLEtBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBQzFCLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7SUFFRCxvQ0FBTTs7OztJQUFOLFVBQU8sVUFBb0I7UUFBM0IsaUJBTUM7OztZQUpPLGNBQWMsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLGlCQUFpQixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLFVBQVUsQ0FBQztRQUN2RyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUc7OztRQUFDO1lBQ1osS0FBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBQ25ELENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7OztJQUVELHFDQUFPOzs7SUFBUDtRQUNFLGFBQWE7SUFDZixDQUFDO0lBRUgsMEJBQUM7QUFBRCxDQUFDLEFBeEVELENBQXlDLGFBQWEsR0F3RXJEOzs7O0lBdkVDLDRDQUFjOzs7OztJQUVGLG1DQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TGliZXJzaWduVXRpbH0gZnJvbSAnLi9saWJlcnNpZ24udXRpbCc7XG5pbXBvcnQge05nWm9uZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0xpYmVyc2lnbkNlcnRpZmljYXRlfSBmcm9tICcuL2NlcnRpZmljYXRlLm1vZGVsJztcblxuZXhwb3J0IGNsYXNzIExpYmVyc2lnbkFwcGxldFV0aWwgZXh0ZW5kcyBMaWJlcnNpZ25VdGlsIHtcbiAgYXBwbGV0RWxlbWVudDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHpvbmU6IE5nWm9uZSkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBpbml0KHVwZGF0ZVVybDogc3RyaW5nLCBhcHBsZXRVcmw6IHN0cmluZykge1xuICAgIHRoaXMuc3RhdHVzLmFwcGxldExvYWRpbmcgPSB0cnVlO1xuICAgIHRoaXMuYXBwbGV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHBsZXRMaWJlcnNpZ24nKTtcbiAgICBpZiAodGhpcy5hcHBsZXRFbGVtZW50ID09IG51bGwpIHtcbiAgICAgIGNvbnN0IGFwcGxldEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGFwcGxldEVsZW1lbnQuaWQgPSAnYXBwbGV0TGliZXJzaWduJztcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYXBwbGV0RWxlbWVudCk7XG5cbiAgICAgIHRoaXMuYXBwbGV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHBsZXRMaWJlcnNpZ24nKTtcblxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgd2luZG93LmFwcGxldElzTG9hZGVkID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnpvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICB0aGlzLnN0YXR1cy5hcHBsZXRMb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5zdGF0dXMuY2VydHNMb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLmxvYWRDZXJ0aWZpY2F0ZXMoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2VsZWN0Q2VydGlmaWNhdGUodGhpcy5mYXZvcml0ZSk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmFwcGxldEVsZW1lbnQuaW5uZXJIVE1MID0gYFxuPGFwcGxldCBjb2RlYmFzZT1cIiR7YXBwbGV0VXJsfVwiIGlkPVwibGliZXJTaWduQXBwbGV0XCIgY29kZT1cIm9yZy9hZHVsbGFjdC9wYXJhcGhldXIvYXBwbGV0cy9zcGxpdHRlZHNpZ24vTWFpbi5jbGFzc1wiIGFyY2hpdmU9XCJTcGxpdHRlZFNpZ25hdHVyZUFwcGxldC5qYXJcIiBuYW1lPVwiU2lnbmF0dXJlIGktUGFyYXBoZXVyXCIgaGVpZ2h0PVwiMFwiIHdpZHRoPVwiMTAwJVwiPlxuICA8cGFyYW0gbmFtZT1cInBlcm1pc3Npb25zXCIgdmFsdWU9XCJhbGwtcGVybWlzc2lvbnNcIj5cbiAgPHBhcmFtIG5hbWU9XCJjb2RlYmFzZV9sb29rdXBcIiB2YWx1ZT1cInRydWVcIj5cbiAgPHBhcmFtIG5hbWU9XCJkaXNwbGF5X2NhbmNlbFwiIHZhbHVlPVwidHJ1ZVwiPlxuICA8cGFyYW0gbmFtZT1cImNhbmNlbF9tb2RlXCIgdmFsdWU9XCJqYXZhc2NyaXB0XCI+XG48L2FwcGxldD5gO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnpvbmUucnVuKCgpID0+IHtcbiAgICAgICAgdGhpcy5zdGF0dXMuYXBwbGV0TG9hZGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN0YXR1cy5jZXJ0c0xvYWRpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmxvYWRDZXJ0aWZpY2F0ZXMoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5zZWxlY3RDZXJ0aWZpY2F0ZSh0aGlzLmZhdm9yaXRlKTtcbiAgICB9XG4gIH1cblxuICBsb2FkQ2VydGlmaWNhdGVzKCkge1xuICAgIGNvbnN0IGFwcGxldEVsZW1lbnQgPSAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpYmVyU2lnbkFwcGxldCcpO1xuICAgIGlmIChhcHBsZXRFbGVtZW50ICE9IG51bGwpIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGNvbnN0IGNlcnRTdHIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGliZXJTaWduQXBwbGV0JykuZ2V0Q2VydGlmaWNhdGVzKCk7XG4gICAgICB0aGlzLmNlcnRpZmljYXRlcyA9IEpTT04ucGFyc2UoY2VydFN0cilbJ2NlcnRzJ107XG4gICAgICB0aGlzLmNvbW1vbkxvYWRDZXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgc2VsZWN0Q2VydGlmaWNhdGUoY2VydDogTGliZXJzaWduQ2VydGlmaWNhdGUpIHtcbiAgICB0aGlzLnpvbmUucnVuKCgpID0+IHtcbiAgICAgIHRoaXMuY3VycmVudENlcnQgPSBjZXJ0O1xuICAgIH0pO1xuICB9XG5cbiAgZG9TaWduKGRhdGFUb1NpZ246IHN0cmluZ1tdKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IHNpZ25hdHVyZVZhbHVlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpYmVyU2lnbkFwcGxldCcpLnNpZ24odGhpcy5jdXJyZW50Q2VydC5JRCwgZGF0YVRvU2lnbik7XG4gICAgdGhpcy56b25lLnJ1bigoKSA9PiB7XG4gICAgICB0aGlzLnNpZ25hdHVyZXMubmV4dChKU09OLnBhcnNlKHNpZ25hdHVyZVZhbHVlKSk7XG4gICAgfSk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgfVxuXG59XG4iXX0=