/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/login/component/login/login.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { LoginPageModelClass } from '../login-model/LoginPageModel.class';
import { DomSanitizer } from '@angular/platform-browser';
export class LoginComponent extends LoginPageModelClass {
    /**
     * @param {?} _DomSanitizationService
     */
    constructor(_DomSanitizationService) {
        super(_DomSanitizationService);
        this._DomSanitizationService = _DomSanitizationService;
        this.testMode = false;
        this.currentPage = 'login';
        this.loginFormAction = '';
        this.loginShowError = false;
        this.loginSuccessMessage = '';
        this.loginIsFormAjax = false;
        this.loginPasswordReset = false;
        this.loginShowRememberMe = false;
        this.loginUsernameInputName = 'username';
        this.loginPasswordInputName = 'password';
        this.loginRememberMeInputName = 'rememberme';
        this.forgotFormAction = '';
        this.forgotIsFormAjax = false;
        this.forgotOneFieldForgot = false;
        this.forgotUsernameInputName = 'username';
        this.forgotEmailInputName = 'email';
        this.forgotUsernameormailInputName = 'usernameormail';
        this.resetFormAction = '';
        this.resetIsFormAjax = false;
        this.resetPasswordInputName = 'password';
        this.resetPasswordConfirmInputName = 'passwordconfirm';
        this.loginSubmit = new EventEmitter();
        this.forgotSubmit = new EventEmitter();
        this.resetSubmit = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    login(event) {
        this.loginSubmit.emit(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    forgot(event) {
        this.forgotSubmit.emit(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    reset(event) {
        this.resetSubmit.emit(event);
    }
}
LoginComponent.decorators = [
    { type: Component, args: [{
                selector: 'ls-login',
                template: "<div *ngIf=\"testMode\" class=\"testmode-container\">\n  <span>Mode test</span>\n  <span class=\"btn btn-primary\" (click)=\"currentPage = 'login'\">Page de login</span>\n  <span class=\"btn btn-primary\" (click)=\"currentPage = 'forgot'\">Mot de passe oubli\u00E9</span>\n  <span class=\"btn btn-primary\" (click)=\"currentPage = 'forgot-success'\">Mot de passe oubli\u00E9 demand\u00E9</span>\n  <span class=\"btn btn-primary\" (click)=\"currentPage = 'reset'\">Remise \u00E0 z\u00E9ro</span>\n</div>\n\n<ls-login-form\n  *ngIf=\"currentPage === 'login'\"\n  [visualConfiguration]=\"_visualConfiguration\"\n  [logo]=\"logo\"\n\n  [formAction]=\"loginFormAction\"\n  [showError]=\"loginShowError\"\n  [successMessage]=\"loginSuccessMessage\"\n  [passwordReset]=\"loginPasswordReset\"\n  [isFormAjax]=\"loginIsFormAjax\"\n  [showRememberMe]=\"loginShowRememberMe\"\n  [passwordInputName]=\"loginPasswordInputName\"\n  [usernameInputName]=\"loginUsernameInputName\"\n  [rememberMeInputName]=\"loginRememberMeInputName\"\n\n  (forgotPassword)=\"currentPage = 'forgot'\"\n  (submit)=\"login($event)\">\n  <ng-content select=\".login-form-addons\"></ng-content>\n</ls-login-form>\n\n<ls-forgot-password\n  *ngIf=\"currentPage === 'forgot'\"\n  [visualConfiguration]=\"_visualConfiguration\"\n  [logo]=\"logo\"\n\n  [formAction]=\"forgotFormAction\"\n  [isFormAjax]=\"forgotIsFormAjax\"\n  [oneFieldForgot]=\"forgotOneFieldForgot\"\n  [usernameInputName]=\"forgotUsernameInputName\"\n  [emailInputName]=\"forgotEmailInputName\"\n  [usernameormailInputName]=\"forgotUsernameormailInputName\"\n\n  (backToLogin)=\"currentPage = 'login'\"\n  (submit)=\"forgot($event)\">\n  <ng-content select=\".forgot-form-addons\"></ng-content>\n</ls-forgot-password>\n\n<ls-forgot-password-success\n  *ngIf=\"currentPage === 'forgot-success'\"\n  [logo]=\"logo\"\n  [visualConfiguration]=\"_visualConfiguration\"\n\n  (backToLogin)=\"currentPage = 'login'\">\n</ls-forgot-password-success>\n\n<ls-reset-password\n  *ngIf=\"currentPage === 'reset'\"\n  [logo]=\"logo\"\n  [visualConfiguration]=\"_visualConfiguration\"\n\n  [formAction]=\"resetFormAction\"\n  [isFormAjax]=\"resetIsFormAjax\"\n  [passwordInputName]=\"resetPasswordInputName\"\n  [passwordConfirmInputName]=\"resetPasswordConfirmInputName\"\n\n  (submit)=\"reset($event)\">\n  <ng-content select=\".reset-form-addons\"></ng-content>\n</ls-reset-password>\n",
                styles: [".testmode-container{-ms-flex-direction:column;-webkit-box-direction:normal;-webkit-box-orient:vertical;display:-webkit-box;display:-ms-flexbox;display:flex;flex-direction:column;left:5px;position:absolute;top:5px;z-index:1;zoom:.7}.testmode-container *{cursor:pointer;margin-bottom:5px}"]
            }] }
];
/** @nocollapse */
LoginComponent.ctorParameters = () => [
    { type: DomSanitizer }
];
LoginComponent.propDecorators = {
    testMode: [{ type: Input }],
    currentPage: [{ type: Input }],
    loginFormAction: [{ type: Input }],
    loginShowError: [{ type: Input }],
    loginSuccessMessage: [{ type: Input }],
    loginIsFormAjax: [{ type: Input }],
    loginPasswordReset: [{ type: Input }],
    loginShowRememberMe: [{ type: Input }],
    loginUsernameInputName: [{ type: Input }],
    loginPasswordInputName: [{ type: Input }],
    loginRememberMeInputName: [{ type: Input }],
    forgotFormAction: [{ type: Input }],
    forgotIsFormAjax: [{ type: Input }],
    forgotOneFieldForgot: [{ type: Input }],
    forgotUsernameInputName: [{ type: Input }],
    forgotEmailInputName: [{ type: Input }],
    forgotUsernameormailInputName: [{ type: Input }],
    resetFormAction: [{ type: Input }],
    resetIsFormAjax: [{ type: Input }],
    resetPasswordInputName: [{ type: Input }],
    resetPasswordConfirmInputName: [{ type: Input }],
    loginSubmit: [{ type: Output }],
    forgotSubmit: [{ type: Output }],
    resetSubmit: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    LoginComponent.prototype.testMode;
    /** @type {?} */
    LoginComponent.prototype.currentPage;
    /** @type {?} */
    LoginComponent.prototype.loginFormAction;
    /** @type {?} */
    LoginComponent.prototype.loginShowError;
    /** @type {?} */
    LoginComponent.prototype.loginSuccessMessage;
    /** @type {?} */
    LoginComponent.prototype.loginIsFormAjax;
    /** @type {?} */
    LoginComponent.prototype.loginPasswordReset;
    /** @type {?} */
    LoginComponent.prototype.loginShowRememberMe;
    /** @type {?} */
    LoginComponent.prototype.loginUsernameInputName;
    /** @type {?} */
    LoginComponent.prototype.loginPasswordInputName;
    /** @type {?} */
    LoginComponent.prototype.loginRememberMeInputName;
    /** @type {?} */
    LoginComponent.prototype.forgotFormAction;
    /** @type {?} */
    LoginComponent.prototype.forgotIsFormAjax;
    /** @type {?} */
    LoginComponent.prototype.forgotOneFieldForgot;
    /** @type {?} */
    LoginComponent.prototype.forgotUsernameInputName;
    /** @type {?} */
    LoginComponent.prototype.forgotEmailInputName;
    /** @type {?} */
    LoginComponent.prototype.forgotUsernameormailInputName;
    /** @type {?} */
    LoginComponent.prototype.resetFormAction;
    /** @type {?} */
    LoginComponent.prototype.resetIsFormAjax;
    /** @type {?} */
    LoginComponent.prototype.resetPasswordInputName;
    /** @type {?} */
    LoginComponent.prototype.resetPasswordConfirmInputName;
    /** @type {?} */
    LoginComponent.prototype.loginSubmit;
    /** @type {?} */
    LoginComponent.prototype.forgotSubmit;
    /** @type {?} */
    LoginComponent.prototype.resetSubmit;
    /** @type {?} */
    LoginComponent.prototype._DomSanitizationService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Ii9idWlsZHMvb3V0aWxzL2NoYXJ0ZWdyYXBoaXF1ZS9saWJyYWlyaWUtYW5ndWxhci9saWIvc3JjLyIsInNvdXJjZXMiOlsibGliL3BhZ2VzL2xvZ2luL2NvbXBvbmVudC9sb2dpbi9sb2dpbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHFDQUFxQyxDQUFDO0FBQ3hFLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQU92RCxNQUFNLE9BQU8sY0FBZSxTQUFRLG1CQUFtQjs7OztJQWtDckQsWUFBbUIsdUJBQXFDO1FBQ3RELEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBRGQsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUFjO1FBaEMvQyxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ2pCLGdCQUFXLEdBQUcsT0FBTyxDQUFDO1FBRXRCLG9CQUFlLEdBQUcsRUFBRSxDQUFDO1FBQ3JCLG1CQUFjLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLHdCQUFtQixHQUFHLEVBQUUsQ0FBQztRQUN6QixvQkFBZSxHQUFHLEtBQUssQ0FBQztRQUN4Qix1QkFBa0IsR0FBRyxLQUFLLENBQUM7UUFDM0Isd0JBQW1CLEdBQUcsS0FBSyxDQUFDO1FBQzVCLDJCQUFzQixHQUFHLFVBQVUsQ0FBQztRQUNwQywyQkFBc0IsR0FBRyxVQUFVLENBQUM7UUFDcEMsNkJBQXdCLEdBQUcsWUFBWSxDQUFDO1FBRXhDLHFCQUFnQixHQUFHLEVBQUUsQ0FBQztRQUN0QixxQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDekIseUJBQW9CLEdBQUcsS0FBSyxDQUFDO1FBQzdCLDRCQUF1QixHQUFHLFVBQVUsQ0FBQztRQUNyQyx5QkFBb0IsR0FBRyxPQUFPLENBQUM7UUFDL0Isa0NBQTZCLEdBQUcsZ0JBQWdCLENBQUM7UUFFakQsb0JBQWUsR0FBRyxFQUFFLENBQUM7UUFDckIsb0JBQWUsR0FBRyxLQUFLLENBQUM7UUFDeEIsMkJBQXNCLEdBQUcsVUFBVSxDQUFDO1FBQ3BDLGtDQUE2QixHQUFJLGlCQUFpQixDQUFDO1FBRzVELGdCQUFXLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFFcEQsaUJBQVksR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUVyRCxnQkFBVyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO0lBSXBELENBQUM7Ozs7O0lBRUQsS0FBSyxDQUFDLEtBQUs7UUFDVCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvQixDQUFDOzs7OztJQUVELE1BQU0sQ0FBQyxLQUFLO1FBQ1YsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7Ozs7SUFFRCxLQUFLLENBQUMsS0FBSztRQUNULElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7OztZQXJERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLDQyRUFBcUM7O2FBRXRDOzs7O1lBTk8sWUFBWTs7O3VCQVNqQixLQUFLOzBCQUNMLEtBQUs7OEJBRUwsS0FBSzs2QkFDTCxLQUFLO2tDQUNMLEtBQUs7OEJBQ0wsS0FBSztpQ0FDTCxLQUFLO2tDQUNMLEtBQUs7cUNBQ0wsS0FBSztxQ0FDTCxLQUFLO3VDQUNMLEtBQUs7K0JBRUwsS0FBSzsrQkFDTCxLQUFLO21DQUNMLEtBQUs7c0NBQ0wsS0FBSzttQ0FDTCxLQUFLOzRDQUNMLEtBQUs7OEJBRUwsS0FBSzs4QkFDTCxLQUFLO3FDQUNMLEtBQUs7NENBQ0wsS0FBSzswQkFFTCxNQUFNOzJCQUVOLE1BQU07MEJBRU4sTUFBTTs7OztJQTdCUCxrQ0FBMEI7O0lBQzFCLHFDQUErQjs7SUFFL0IseUNBQThCOztJQUM5Qix3Q0FBZ0M7O0lBQ2hDLDZDQUFrQzs7SUFDbEMseUNBQWlDOztJQUNqQyw0Q0FBb0M7O0lBQ3BDLDZDQUFxQzs7SUFDckMsZ0RBQTZDOztJQUM3QyxnREFBNkM7O0lBQzdDLGtEQUFpRDs7SUFFakQsMENBQStCOztJQUMvQiwwQ0FBa0M7O0lBQ2xDLDhDQUFzQzs7SUFDdEMsaURBQThDOztJQUM5Qyw4Q0FBd0M7O0lBQ3hDLHVEQUEwRDs7SUFFMUQseUNBQThCOztJQUM5Qix5Q0FBaUM7O0lBQ2pDLGdEQUE2Qzs7SUFDN0MsdURBQTREOztJQUU1RCxxQ0FDb0Q7O0lBQ3BELHNDQUNxRDs7SUFDckQscUNBQ29EOztJQUV4QyxpREFBNEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TG9naW5QYWdlTW9kZWxDbGFzc30gZnJvbSAnLi4vbG9naW4tbW9kZWwvTG9naW5QYWdlTW9kZWwuY2xhc3MnO1xuaW1wb3J0IHtEb21TYW5pdGl6ZXJ9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdscy1sb2dpbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9sb2dpbi5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2xvZ2luLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgTG9naW5Db21wb25lbnQgZXh0ZW5kcyBMb2dpblBhZ2VNb2RlbENsYXNzIHtcblxuICBASW5wdXQoKSB0ZXN0TW9kZSA9IGZhbHNlO1xuICBASW5wdXQoKSBjdXJyZW50UGFnZSA9ICdsb2dpbic7XG5cbiAgQElucHV0KCkgbG9naW5Gb3JtQWN0aW9uID0gJyc7XG4gIEBJbnB1dCgpIGxvZ2luU2hvd0Vycm9yID0gZmFsc2U7XG4gIEBJbnB1dCgpIGxvZ2luU3VjY2Vzc01lc3NhZ2UgPSAnJztcbiAgQElucHV0KCkgbG9naW5Jc0Zvcm1BamF4ID0gZmFsc2U7XG4gIEBJbnB1dCgpIGxvZ2luUGFzc3dvcmRSZXNldCA9IGZhbHNlO1xuICBASW5wdXQoKSBsb2dpblNob3dSZW1lbWJlck1lID0gZmFsc2U7XG4gIEBJbnB1dCgpIGxvZ2luVXNlcm5hbWVJbnB1dE5hbWUgPSAndXNlcm5hbWUnO1xuICBASW5wdXQoKSBsb2dpblBhc3N3b3JkSW5wdXROYW1lID0gJ3Bhc3N3b3JkJztcbiAgQElucHV0KCkgbG9naW5SZW1lbWJlck1lSW5wdXROYW1lID0gJ3JlbWVtYmVybWUnO1xuXG4gIEBJbnB1dCgpIGZvcmdvdEZvcm1BY3Rpb24gPSAnJztcbiAgQElucHV0KCkgZm9yZ290SXNGb3JtQWpheCA9IGZhbHNlO1xuICBASW5wdXQoKSBmb3Jnb3RPbmVGaWVsZEZvcmdvdCA9IGZhbHNlO1xuICBASW5wdXQoKSBmb3Jnb3RVc2VybmFtZUlucHV0TmFtZSA9ICd1c2VybmFtZSc7XG4gIEBJbnB1dCgpIGZvcmdvdEVtYWlsSW5wdXROYW1lID0gJ2VtYWlsJztcbiAgQElucHV0KCkgZm9yZ290VXNlcm5hbWVvcm1haWxJbnB1dE5hbWUgPSAndXNlcm5hbWVvcm1haWwnO1xuXG4gIEBJbnB1dCgpIHJlc2V0Rm9ybUFjdGlvbiA9ICcnO1xuICBASW5wdXQoKSByZXNldElzRm9ybUFqYXggPSBmYWxzZTtcbiAgQElucHV0KCkgcmVzZXRQYXNzd29yZElucHV0TmFtZSA9ICdwYXNzd29yZCc7XG4gIEBJbnB1dCgpIHJlc2V0UGFzc3dvcmRDb25maXJtSW5wdXROYW1lICA9ICdwYXNzd29yZGNvbmZpcm0nO1xuXG4gIEBPdXRwdXQoKVxuICBsb2dpblN1Ym1pdDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKVxuICBmb3Jnb3RTdWJtaXQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KClcbiAgcmVzZXRTdWJtaXQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBfRG9tU2FuaXRpemF0aW9uU2VydmljZTogRG9tU2FuaXRpemVyKSB7XG4gICAgc3VwZXIoX0RvbVNhbml0aXphdGlvblNlcnZpY2UpO1xuICB9XG5cbiAgbG9naW4oZXZlbnQpIHtcbiAgICB0aGlzLmxvZ2luU3VibWl0LmVtaXQoZXZlbnQpO1xuICB9XG5cbiAgZm9yZ290KGV2ZW50KSB7XG4gICAgdGhpcy5mb3Jnb3RTdWJtaXQuZW1pdChldmVudCk7XG4gIH1cblxuICByZXNldChldmVudCkge1xuICAgIHRoaXMucmVzZXRTdWJtaXQuZW1pdChldmVudCk7XG4gIH1cbn1cbiJdfQ==