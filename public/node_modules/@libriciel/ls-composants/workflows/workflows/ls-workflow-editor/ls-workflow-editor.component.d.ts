import { EventEmitter, OnInit, QueryList, TemplateRef } from '@angular/core';
import { NgbPopover } from '@ng-bootstrap/ng-bootstrap';
import { WorkflowModel } from '../../shared/model/workflows/workflow-model';
import { StepModel } from '../../shared/model/workflows/step-model';
import { CdkDragDrop } from '@angular/cdk/drag-drop';
import { WorkflowModelLocalizedMessages, WorkflowModelOptions } from '../../shared/model/workflows/workflow-model-options';
export declare class LsWorkflowEditorComponent implements OnInit {
    currentEditedStepIdx: number;
    endpointPopoverElementRef: NgbPopover;
    allCircuitEditionPopover: QueryList<NgbPopover>;
    currentPopover: NgbPopover;
    popEditContentTemplateRef: TemplateRef<any>;
    popCreateContentTemplateRef: TemplateRef<any>;
    endpointPopoverEditContentRef: TemplateRef<any>;
    stepDisplayContentRef: TemplateRef<any>;
    lastStepDisplayContentRef: TemplateRef<any>;
    messages: WorkflowModelLocalizedMessages;
    activeOptions: WorkflowModelOptions;
    endpointIsEditable: boolean;
    getStepIconClassFct: (step: StepModel) => string;
    getStepTooltipFct: (step: StepModel) => string;
    confirmStepDeletionFct: (step: StepModel) => Promise<boolean>;
    lastStepData: StepModel;
    workflowData: WorkflowModel;
    workflowChange: EventEmitter<WorkflowModel>;
    constructor();
    localizedMessages: WorkflowModelLocalizedMessages;
    options: WorkflowModelOptions;
    workflow: WorkflowModel;
    ngOnInit(): void;
    workflowDataChanged(): void;
    askForStepDeletion(stepIdx: number): void;
    confirmStepCreation(stepData: StepModel, idx: number): void;
    confirmStepEdition(stepData: StepModel, idx: number): void;
    confirmFinalStepEdition(): void;
    cancelStepEdition(): void;
    cancelStepCreation(idx: number): void;
    isFirstStep(): boolean;
    getAdditionalStepClass(idx: number): string;
    getStepIconClass(step: StepModel): string;
    getStepTooltip(step: StepModel): string;
    cloneStep(src: StepModel): StepModel;
    createStep(stepIdx: number): void;
    editStep(stepIdx: number): void;
    editFinalStep(): void;
    drop(event: CdkDragDrop<StepModel[]>): void;
    dragDisabledForIdx(idx: number): boolean;
    private closeCurrentPopover;
    private addStep;
    private replaceStep;
    private deleteStep;
    private getCreationPopoverForIdx;
    private getEditionPopoverForIdx;
}
