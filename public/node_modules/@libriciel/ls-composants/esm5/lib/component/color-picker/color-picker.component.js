/**
 * @fileoverview added by tsickle
 * Generated from: lib/component/color-picker/color-picker.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, forwardRef, HostListener, Input, Output, Renderer2, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
var ColorPickerComponent = /** @class */ (function () {
    function ColorPickerComponent(renderer2, element) {
        this.renderer2 = renderer2;
        this.element = element;
        // input for hex color
        this.size = 200; // height == width
        // height == width
        this.changed = new EventEmitter();
        this.isdown = false; // mouse down on 'slider' element
        // mouse down on 'slider' element
        this.sqIsDown = false; // mouse down on 'picker' element
        // mouse down on 'picker' element
        this.isHidden = false;
        /**
         * The element make an HSV as it's much more easy to calculate with a color picker
         * H : hue
         * S : saturation
         * V : value
         */
        this.hue = 0;
        this.saturation = 0;
        this.value = 0;
        // This property is used to calculate 'picker' background with specific hue, we use 'hsl' with current 'hue'
        this.cssprop = 'linear-gradient(to top, #000000, rgba(255,255,255,0)), linear-gradient(to right, #ffffff , hsl(%hue%, 100%, 50%))';
        /**
         * ***
         * ngModel required functions
         */
        this.onChange = (/**
         * @return {?}
         */
        function () {
            // tslint:disable-next-line:semicolon
        });
        this.onTouched = (/**
         * @return {?}
         */
        function () {
            // tslint:disable-next-line:semicolon
        });
    }
    Object.defineProperty(ColorPickerComponent.prototype, "color", {
        /*******
         * Define color getter and setter
         */
        get: 
        // Private color, as we need setter and getter to listen to change
        /**
         * ****
         * Define color getter and setter
         * @return {?}
         */
        function () {
            return this._color;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.defineColor(value);
        },
        enumerable: true,
        configurable: true
    });
    /*******
     * Define 'id' of input element and remove id of current element
     */
    /**
     * ****
     * Define 'id' of input element and remove id of current element
     * @return {?}
     */
    ColorPickerComponent.prototype.ngAfterViewInit = /**
     * ****
     * Define 'id' of input element and remove id of current element
     * @return {?}
     */
    function () {
        /** @type {?} */
        var id = this.element.nativeElement.getAttribute('id');
        this.renderer2.removeAttribute(this.element.nativeElement, 'id');
        this.renderer2.setAttribute(this.input.nativeElement, 'id', id);
    };
    /**
     * Update color of 'slider' and 'picker' on 'hue' change
     */
    /**
     * Update color of 'slider' and 'picker' on 'hue' change
     * @return {?}
     */
    ColorPickerComponent.prototype.changePickerColor = /**
     * Update color of 'slider' and 'picker' on 'hue' change
     * @return {?}
     */
    function () {
        this.renderer2.setStyle(this.slider.nativeElement, 'background', 'hsl(%hue%, 100%, 50%)'.replace('%hue%', '' + this.hue));
        this.renderer2.setStyle(this.picker.nativeElement, 'background', this.cssprop.replace('%hue%', '' + this.hue));
    };
    /**
     * Update _color property on change, and emit onChange event for ngModel
     */
    /**
     * Update _color property on change, and emit onChange event for ngModel
     * @return {?}
     */
    ColorPickerComponent.prototype.pickerChange = /**
     * Update _color property on change, and emit onChange event for ngModel
     * @return {?}
     */
    function () {
        /** @type {?} */
        var rgb = this.hsvToRgb();
        /** @type {?} */
        var hex = '#' + ('00' + rgb[0].toString(16).toUpperCase()).slice(-2) +
            ('00' + rgb[1].toString(16).toUpperCase()).slice(-2) +
            ('00' + rgb[2].toString(16).toUpperCase()).slice(-2);
        this._color = hex;
        this.onChange(hex);
    };
    /**
     * Set 'slider' position with 'hue' value
     */
    /**
     * Set 'slider' position with 'hue' value
     * @return {?}
     */
    ColorPickerComponent.prototype.huePosition = /**
     * Set 'slider' position with 'hue' value
     * @return {?}
     */
    function () {
        /** @type {?} */
        var px = Math.round(Math.max(this.hue * (this.size - 24) / 360, 0));
        this.renderer2.setStyle(this.slider.nativeElement, 'left', px - 12 + 'px');
        this.changePickerColor();
        this.pickerChange();
    };
    /**
     * Set 'pointer' position with 'saturation' and 'value' values
     */
    /**
     * Set 'pointer' position with 'saturation' and 'value' values
     * @return {?}
     */
    ColorPickerComponent.prototype.sqPosition = /**
     * Set 'pointer' position with 'saturation' and 'value' values
     * @return {?}
     */
    function () {
        /** @type {?} */
        var px = Math.round(Math.max(this.saturation * this.size / 100, 0));
        this.renderer2.setStyle(this.pointer.nativeElement, 'left', px - 12 + 'px');
        /** @type {?} */
        var py = Math.round(Math.max((100 - this.value) * this.size / 100, 0));
        this.renderer2.setStyle(this.pointer.nativeElement, 'top', py - 12 + 'px');
        this.pickerChange();
    };
    /********
     * When we change 'hue' with mouse click, juste go to the position and emit color change
     * @param event the mouse click event
     */
    /**
     * *****
     * When we change 'hue' with mouse click, juste go to the position and emit color change
     * @param {?} event the mouse click event
     * @return {?}
     */
    ColorPickerComponent.prototype.changeHue = /**
     * *****
     * When we change 'hue' with mouse click, juste go to the position and emit color change
     * @param {?} event the mouse click event
     * @return {?}
     */
    function (event) {
        this.hue = Math.round(event.offsetX * 360 / event.target.clientWidth);
        this.huePosition();
        this.changed.emit(this._color);
    };
    /**
     * @param {?} color
     * @return {?}
     */
    ColorPickerComponent.prototype.defineColor = /**
     * @param {?} color
     * @return {?}
     */
    function (color) {
        if (color && color.length === 7) {
            this._color = color;
            /** @type {?} */
            var R = parseInt(this._color.substring(1, 3), 16);
            /** @type {?} */
            var G = parseInt(this._color.substring(3, 5), 16);
            /** @type {?} */
            var B = parseInt(this._color.substring(5), 16);
            this.rgbToHsv(R, G, B);
            this.huePosition();
            this.sqPosition();
            this.changed.emit(this._color);
        }
    };
    /****
     * Events handlers : mouseup, mousemove and mousedown
     */
    /**
     * *
     * Events handlers : mouseup, mousemove and mousedown
     * @return {?}
     */
    ColorPickerComponent.prototype.mouseUp = /**
     * *
     * Events handlers : mouseup, mousemove and mousedown
     * @return {?}
     */
    function () {
        if (this.isdown || this.sqIsDown) {
            // Trigger event only if it was clicked
            this.changed.emit(this._color);
        }
        this.isdown = false;
        this.sqIsDown = false;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ColorPickerComponent.prototype.mouseMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.isdown) {
            /** @type {?} */
            var rect = this.slider.nativeElement.parentElement.getBoundingClientRect();
            /** @type {?} */
            var position = event.clientX - rect.left;
            this.hue = Math.round(position * 360 / rect.width);
            if (this.hue > 360) {
                this.hue = 360;
            }
            else if (this.hue < 0) {
                this.hue = 0;
            }
            this.huePosition();
        }
        if (this.sqIsDown) {
            /** @type {?} */
            var rect = this.pointer.nativeElement.parentElement.getBoundingClientRect();
            /** @type {?} */
            var xposition = event.clientX - rect.left;
            this.saturation = Math.round(xposition * 100 / rect.width);
            if (this.saturation > 100) {
                this.saturation = 100;
            }
            else if (this.saturation < 0) {
                this.saturation = 0;
            }
            /** @type {?} */
            var yposition = event.clientY - rect.top;
            this.value = 100 - Math.round(yposition * 100 / rect.height);
            if (this.value > 100) {
                this.value = 100;
            }
            else if (this.value < 0) {
                this.value = 0;
            }
            this.sqPosition();
        }
    };
    /**
     * @return {?}
     */
    ColorPickerComponent.prototype.huemouseDown = /**
     * @return {?}
     */
    function () {
        this.isdown = true;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ColorPickerComponent.prototype.sqmouseDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.sqIsDown = true;
        this.mouseMove(event);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ColorPickerComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ColorPickerComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ColorPickerComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.defineColor(value);
    };
    /*********
     * Utils fonctions, convert HSV <-> RGB
     */
    /**
     * ******
     * Utils fonctions, convert HSV <-> RGB
     * @return {?}
     */
    ColorPickerComponent.prototype.hsvToRgb = /**
     * ******
     * Utils fonctions, convert HSV <-> RGB
     * @return {?}
     */
    function () {
        /** @type {?} */
        var H = this.hue;
        /** @type {?} */
        var V = this.value / 100;
        /** @type {?} */
        var S = this.saturation / 100;
        /** @type {?} */
        var C = V * S;
        /** @type {?} */
        var X = C * (1 - Math.abs((H / 60) % 2 - 1));
        /** @type {?} */
        var m = V - C;
        /** @type {?} */
        var prime = [C, 0, X];
        if (H < 60) {
            prime = [C, X, 0];
        }
        else if (H < 120) {
            prime = [X, C, 0];
        }
        else if (H < 180) {
            prime = [0, C, X];
        }
        else if (H < 240) {
            prime = [0, X, C];
        }
        else if (H < 300) {
            prime = [X, 0, C];
        }
        return [
            Math.round((prime[0] + m) * 255),
            Math.round((prime[1] + m) * 255),
            Math.round((prime[2] + m) * 255)
        ];
    };
    /**
     * @param {?} R
     * @param {?} G
     * @param {?} B
     * @return {?}
     */
    ColorPickerComponent.prototype.rgbToHsv = /**
     * @param {?} R
     * @param {?} G
     * @param {?} B
     * @return {?}
     */
    function (R, G, B) {
        /** @type {?} */
        var Rp = R / 255;
        /** @type {?} */
        var Gp = G / 255;
        /** @type {?} */
        var Bp = B / 255;
        /** @type {?} */
        var Cmax = Math.max(Rp, Gp, Bp);
        /** @type {?} */
        var Cmin = Math.min(Rp, Gp, Bp);
        /** @type {?} */
        var Delta = Cmax - Cmin;
        /** @type {?} */
        var H = 0;
        if (Delta === 0) {
            H = 0;
        }
        else if (Cmax === Rp) {
            H = 60 * ((Gp - Bp) / Delta % 6);
        }
        else if (Cmax === Gp) {
            H = 60 * ((Bp - Rp) / Delta + 2);
        }
        else if (Cmax === Bp) {
            H = 60 * ((Rp - Gp) / Delta + 4);
        }
        /** @type {?} */
        var S = 0;
        if (Cmax !== 0) {
            S = Delta / Cmax;
        }
        this.hue = H;
        this.saturation = S * 100;
        this.value = Cmax * 100;
    };
    ColorPickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ls-color-picker',
                    template: "<div class=\"picker-container\" [style.width]=\"size + 2 + 'px'\">\n  <div #picker class=\"picker\" [style.height]=\"size + 'px'\" (mousedown)=\"sqmouseDown($event)\">\n    <div #pointer class=\"pointer\" [style.background-color]=\"color\"></div>\n  </div>\n\n  <div class=\"slider-container\">\n    <div class=\"hue\" (click)=\"changeHue($event)\"></div>\n    <div #slider class=\"slider\" [class.notclicked]=\"!isdown\" (mousedown)=\"huemouseDown()\"></div>\n  </div>\n\n  <div class=\"result-container\">\n    <span class=\"selected-color\" [style.background-color]=\"color\">\n\n    </span>\n    <input maxlength=\"7\" #input pattern=\"#[A-Fa-f0-9]{6}\" [(ngModel)]=\"color\">\n  </div>\n</div>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return ColorPickerComponent; })),
                            multi: true
                        }
                    ],
                    styles: ["*{-webkit-box-sizing:border-box;box-sizing:border-box}.picker{width:100%;height:200px;position:relative;margin-bottom:20px}.pointer{width:22px;height:22px;background-color:#000;border-radius:11px;border:2px solid #fff;position:absolute;top:0;left:0;cursor:pointer}.hue{height:8px;width:100%;border-radius:4px;background:-webkit-gradient(linear,left top,right top,from(red),color-stop(yellow),color-stop(lime),color-stop(cyan),color-stop(blue),color-stop(magenta),to(red));background:linear-gradient(to right,red,#ff0,#0f0,#0ff,#00f,#ff00ff,red)}.slider{width:24px;height:24px;background-color:#000;border-radius:12px;border:2px solid #fff;position:absolute;top:0;left:0;cursor:pointer}.slider.notclicked{-webkit-transition:left .2s;transition:left .2s}.slider-container{height:24px;margin-left:12px;margin-right:12px;position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-bottom:20px}.selected-color{background-color:#000;display:inline-block;height:30px;width:80px;margin-right:16px;border:1px solid var(--ls-grey-200)}.picker-container{border:1px solid var(--ls-grey-200);border-bottom-left-radius:5px;border-bottom-right-radius:5px}.result-container{margin:16px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.result-container input{width:80px}"]
                }] }
    ];
    /** @nocollapse */
    ColorPickerComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    ColorPickerComponent.propDecorators = {
        picker: [{ type: ViewChild, args: ['picker',] }],
        slider: [{ type: ViewChild, args: ['slider',] }],
        pointer: [{ type: ViewChild, args: ['pointer',] }],
        input: [{ type: ViewChild, args: ['input',] }],
        size: [{ type: Input }],
        changed: [{ type: Output }],
        color: [{ type: Input }],
        mouseUp: [{ type: HostListener, args: ['document:mouseup', [],] }],
        mouseMove: [{ type: HostListener, args: ['document:mousemove', ['$event'],] }]
    };
    return ColorPickerComponent;
}());
export { ColorPickerComponent };
if (false) {
    /** @type {?} */
    ColorPickerComponent.prototype.picker;
    /** @type {?} */
    ColorPickerComponent.prototype.slider;
    /** @type {?} */
    ColorPickerComponent.prototype.pointer;
    /** @type {?} */
    ColorPickerComponent.prototype.input;
    /** @type {?} */
    ColorPickerComponent.prototype.size;
    /** @type {?} */
    ColorPickerComponent.prototype.changed;
    /** @type {?} */
    ColorPickerComponent.prototype.isdown;
    /** @type {?} */
    ColorPickerComponent.prototype.sqIsDown;
    /** @type {?} */
    ColorPickerComponent.prototype.isHidden;
    /**
     * The element make an HSV as it's much more easy to calculate with a color picker
     * H : hue
     * S : saturation
     * V : value
     * @type {?}
     */
    ColorPickerComponent.prototype.hue;
    /** @type {?} */
    ColorPickerComponent.prototype.saturation;
    /** @type {?} */
    ColorPickerComponent.prototype.value;
    /** @type {?} */
    ColorPickerComponent.prototype.cssprop;
    /**
     * @type {?}
     * @private
     */
    ColorPickerComponent.prototype._color;
    /**
     * ***
     * ngModel required functions
     * @type {?}
     */
    ColorPickerComponent.prototype.onChange;
    /** @type {?} */
    ColorPickerComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    ColorPickerComponent.prototype.renderer2;
    /**
     * @type {?}
     * @private
     */
    ColorPickerComponent.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,