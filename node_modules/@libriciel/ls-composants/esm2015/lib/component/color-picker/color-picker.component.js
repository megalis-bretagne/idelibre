/**
 * @fileoverview added by tsickle
 * Generated from: lib/component/color-picker/color-picker.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, forwardRef, HostListener, Input, Output, Renderer2, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export class ColorPickerComponent {
    /**
     * @param {?} renderer2
     * @param {?} element
     */
    constructor(renderer2, element) {
        this.renderer2 = renderer2;
        this.element = element;
        // input for hex color
        this.size = 200; // height == width
        // height == width
        this.changed = new EventEmitter();
        this.isdown = false; // mouse down on 'slider' element
        // mouse down on 'slider' element
        this.sqIsDown = false; // mouse down on 'picker' element
        // mouse down on 'picker' element
        this.isHidden = false;
        /**
         * The element make an HSV as it's much more easy to calculate with a color picker
         * H : hue
         * S : saturation
         * V : value
         */
        this.hue = 0;
        this.saturation = 0;
        this.value = 0;
        // This property is used to calculate 'picker' background with specific hue, we use 'hsl' with current 'hue'
        this.cssprop = 'linear-gradient(to top, #000000, rgba(255,255,255,0)), linear-gradient(to right, #ffffff , hsl(%hue%, 100%, 50%))';
        /**
         * ***
         * ngModel required functions
         */
        this.onChange = (/**
         * @return {?}
         */
        () => {
            // tslint:disable-next-line:semicolon
        });
        this.onTouched = (/**
         * @return {?}
         */
        () => {
            // tslint:disable-next-line:semicolon
        });
    }
    // Private color, as we need setter and getter to listen to change
    /**
     * ****
     * Define color getter and setter
     * @return {?}
     */
    get color() {
        return this._color;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set color(value) {
        this.defineColor(value);
    }
    /**
     * ****
     * Define 'id' of input element and remove id of current element
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        const id = this.element.nativeElement.getAttribute('id');
        this.renderer2.removeAttribute(this.element.nativeElement, 'id');
        this.renderer2.setAttribute(this.input.nativeElement, 'id', id);
        this.defineColor(this.color);
    }
    /**
     * Update color of 'slider' and 'picker' on 'hue' change
     * @return {?}
     */
    changePickerColor() {
        if (this.slider) {
            this.renderer2.setStyle(this.slider.nativeElement, 'background', 'hsl(%hue%, 100%, 50%)'.replace('%hue%', '' + this.hue));
            this.renderer2.setStyle(this.picker.nativeElement, 'background', this.cssprop.replace('%hue%', '' + this.hue));
        }
    }
    /**
     * Update _color property on change, and emit onChange event for ngModel
     * @return {?}
     */
    pickerChange() {
        /** @type {?} */
        const rgb = this.hsvToRgb();
        /** @type {?} */
        const hex = '#' + ('00' + rgb[0].toString(16).toUpperCase()).slice(-2) +
            ('00' + rgb[1].toString(16).toUpperCase()).slice(-2) +
            ('00' + rgb[2].toString(16).toUpperCase()).slice(-2);
        this._color = hex;
        this.onChange(hex);
    }
    /**
     * Set 'slider' position with 'hue' value
     * @return {?}
     */
    huePosition() {
        /** @type {?} */
        const px = Math.round(Math.max(this.hue * (this.size - 24) / 360, 0));
        if (this.slider) {
            this.renderer2.setStyle(this.slider.nativeElement, 'left', px - 12 + 'px');
        }
        this.changePickerColor();
        this.pickerChange();
    }
    /**
     * Set 'pointer' position with 'saturation' and 'value' values
     * @return {?}
     */
    sqPosition() {
        if (this.pointer) {
            /** @type {?} */
            const px = Math.round(Math.max(this.saturation * this.size / 100, 0));
            this.renderer2.setStyle(this.pointer.nativeElement, 'left', px - 12 + 'px');
            /** @type {?} */
            const py = Math.round(Math.max((100 - this.value) * this.size / 100, 0));
            this.renderer2.setStyle(this.pointer.nativeElement, 'top', py - 12 + 'px');
            this.pickerChange();
        }
    }
    /**
     * *****
     * When we change 'hue' with mouse click, juste go to the position and emit color change
     * @param {?} event the mouse click event
     * @return {?}
     */
    changeHue(event) {
        this.hue = Math.round(event.offsetX * 360 / event.target.clientWidth);
        this.huePosition();
        this.changed.emit(this._color);
    }
    /**
     * @param {?} color
     * @return {?}
     */
    defineColor(color) {
        if (color && color.length === 7) {
            this._color = color;
            /** @type {?} */
            const R = parseInt(this._color.substring(1, 3), 16);
            /** @type {?} */
            const G = parseInt(this._color.substring(3, 5), 16);
            /** @type {?} */
            const B = parseInt(this._color.substring(5), 16);
            this.rgbToHsv(R, G, B);
            this.huePosition();
            this.sqPosition();
            this.changed.emit(this._color);
        }
    }
    /**
     * *
     * Events handlers : mouseup, mousemove and mousedown
     * @return {?}
     */
    mouseUp() {
        if (this.isdown || this.sqIsDown) {
            // Trigger event only if it was clicked
            this.changed.emit(this._color);
        }
        this.isdown = false;
        this.sqIsDown = false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    mouseMove(event) {
        if (this.isdown) {
            /** @type {?} */
            const rect = this.slider.nativeElement.parentElement.getBoundingClientRect();
            /** @type {?} */
            const position = event.clientX - rect.left;
            this.hue = Math.round(position * 360 / rect.width);
            if (this.hue > 360) {
                this.hue = 360;
            }
            else if (this.hue < 0) {
                this.hue = 0;
            }
            this.huePosition();
        }
        if (this.sqIsDown) {
            /** @type {?} */
            const rect = this.pointer.nativeElement.parentElement.getBoundingClientRect();
            /** @type {?} */
            const xposition = event.clientX - rect.left;
            this.saturation = Math.round(xposition * 100 / rect.width);
            if (this.saturation > 100) {
                this.saturation = 100;
            }
            else if (this.saturation < 0) {
                this.saturation = 0;
            }
            /** @type {?} */
            const yposition = event.clientY - rect.top;
            this.value = 100 - Math.round(yposition * 100 / rect.height);
            if (this.value > 100) {
                this.value = 100;
            }
            else if (this.value < 0) {
                this.value = 0;
            }
            this.sqPosition();
        }
    }
    /**
     * @return {?}
     */
    huemouseDown() {
        this.isdown = true;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    sqmouseDown(event) {
        this.sqIsDown = true;
        this.mouseMove(event);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.defineColor(value);
    }
    /**
     * ******
     * Utils fonctions, convert HSV <-> RGB
     * @return {?}
     */
    hsvToRgb() {
        /** @type {?} */
        const H = this.hue;
        /** @type {?} */
        const V = this.value / 100;
        /** @type {?} */
        const S = this.saturation / 100;
        /** @type {?} */
        const C = V * S;
        /** @type {?} */
        const X = C * (1 - Math.abs((H / 60) % 2 - 1));
        /** @type {?} */
        const m = V - C;
        /** @type {?} */
        let prime = [C, 0, X];
        if (H < 60) {
            prime = [C, X, 0];
        }
        else if (H < 120) {
            prime = [X, C, 0];
        }
        else if (H < 180) {
            prime = [0, C, X];
        }
        else if (H < 240) {
            prime = [0, X, C];
        }
        else if (H < 300) {
            prime = [X, 0, C];
        }
        return [
            Math.round((prime[0] + m) * 255),
            Math.round((prime[1] + m) * 255),
            Math.round((prime[2] + m) * 255)
        ];
    }
    /**
     * @param {?} R
     * @param {?} G
     * @param {?} B
     * @return {?}
     */
    rgbToHsv(R, G, B) {
        /** @type {?} */
        const Rp = R / 255;
        /** @type {?} */
        const Gp = G / 255;
        /** @type {?} */
        const Bp = B / 255;
        /** @type {?} */
        const Cmax = Math.max(Rp, Gp, Bp);
        /** @type {?} */
        const Cmin = Math.min(Rp, Gp, Bp);
        /** @type {?} */
        const Delta = Cmax - Cmin;
        /** @type {?} */
        let H = 0;
        if (Delta === 0) {
            H = 0;
        }
        else if (Cmax === Rp) {
            H = 60 * ((Gp - Bp) / Delta % 6);
        }
        else if (Cmax === Gp) {
            H = 60 * ((Bp - Rp) / Delta + 2);
        }
        else if (Cmax === Bp) {
            H = 60 * ((Rp - Gp) / Delta + 4);
        }
        /** @type {?} */
        let S = 0;
        if (Cmax !== 0) {
            S = Delta / Cmax;
        }
        this.hue = H;
        this.saturation = S * 100;
        this.value = Cmax * 100;
    }
}
ColorPickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'ls-color-picker',
                template: "<div class=\"picker-container\" [style.width]=\"size + 2 + 'px'\">\n  <div #picker class=\"picker\" [style.height]=\"size + 'px'\" (mousedown)=\"sqmouseDown($event)\">\n    <div #pointer class=\"pointer\" [style.background-color]=\"color\"></div>\n  </div>\n\n  <div class=\"slider-container\">\n    <div class=\"hue\" (click)=\"changeHue($event)\"></div>\n    <div #slider class=\"slider\" [class.notclicked]=\"!isdown\" (mousedown)=\"huemouseDown()\"></div>\n  </div>\n\n  <div class=\"result-container\">\n    <span class=\"selected-color\" [style.background-color]=\"color\">\n\n    </span>\n    <input maxlength=\"7\" #input pattern=\"#[A-Fa-f0-9]{6}\" [(ngModel)]=\"color\">\n  </div>\n</div>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ColorPickerComponent)),
                        multi: true
                    }
                ],
                styles: ["*{-webkit-box-sizing:border-box;box-sizing:border-box}.picker{height:200px;margin-bottom:20px;position:relative;width:100%}.pointer{background-color:#000;border:2px solid #fff;border-radius:11px;cursor:pointer;height:22px;left:0;position:absolute;top:0;width:22px}.hue{background:-webkit-gradient(linear,left top,right top,from(red),color-stop(#ff0),color-stop(#0f0),color-stop(#0ff),color-stop(#00f),color-stop(#f0f),to(red));background:linear-gradient(90deg,red,#ff0,#0f0,#0ff,#00f,#f0f,red);border-radius:4px;height:8px;width:100%}.slider{background-color:#000;border:2px solid #fff;border-radius:12px;cursor:pointer;height:24px;left:0;position:absolute;top:0;width:24px}.slider.notclicked{-webkit-transition:left .2s;transition:left .2s}.slider-container{-ms-flex-align:center;-webkit-box-align:center;align-items:center;display:-webkit-box;display:-ms-flexbox;display:flex;height:24px;margin-bottom:20px;margin-left:12px;margin-right:12px;position:relative}.selected-color{background-color:#000;display:inline-block;height:30px;margin-right:16px;width:80px}.picker-container,.selected-color{border:1px solid var(--ls-grey-200)}.picker-container{border-bottom-left-radius:5px;border-bottom-right-radius:5px}.result-container{-ms-flex-align:center;-ms-flex-pack:justify;-webkit-box-align:center;-webkit-box-pack:justify;align-items:center;display:-webkit-box;display:-ms-flexbox;display:flex;justify-content:space-between;margin:16px}.result-container input{width:80px}"]
            }] }
];
/** @nocollapse */
ColorPickerComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
ColorPickerComponent.propDecorators = {
    picker: [{ type: ViewChild, args: ['picker',] }],
    slider: [{ type: ViewChild, args: ['slider',] }],
    pointer: [{ type: ViewChild, args: ['pointer',] }],
    input: [{ type: ViewChild, args: ['input',] }],
    size: [{ type: Input }],
    changed: [{ type: Output }],
    color: [{ type: Input }],
    mouseUp: [{ type: HostListener, args: ['document:mouseup', [],] }],
    mouseMove: [{ type: HostListener, args: ['document:mousemove', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    ColorPickerComponent.prototype.picker;
    /** @type {?} */
    ColorPickerComponent.prototype.slider;
    /** @type {?} */
    ColorPickerComponent.prototype.pointer;
    /** @type {?} */
    ColorPickerComponent.prototype.input;
    /** @type {?} */
    ColorPickerComponent.prototype.size;
    /** @type {?} */
    ColorPickerComponent.prototype.changed;
    /** @type {?} */
    ColorPickerComponent.prototype.isdown;
    /** @type {?} */
    ColorPickerComponent.prototype.sqIsDown;
    /** @type {?} */
    ColorPickerComponent.prototype.isHidden;
    /**
     * The element make an HSV as it's much more easy to calculate with a color picker
     * H : hue
     * S : saturation
     * V : value
     * @type {?}
     */
    ColorPickerComponent.prototype.hue;
    /** @type {?} */
    ColorPickerComponent.prototype.saturation;
    /** @type {?} */
    ColorPickerComponent.prototype.value;
    /** @type {?} */
    ColorPickerComponent.prototype.cssprop;
    /**
     * @type {?}
     * @private
     */
    ColorPickerComponent.prototype._color;
    /**
     * ***
     * ngModel required functions
     * @type {?}
     */
    ColorPickerComponent.prototype.onChange;
    /** @type {?} */
    ColorPickerComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    ColorPickerComponent.prototype.renderer2;
    /**
     * @type {?}
     * @private
     */
    ColorPickerComponent.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3ItcGlja2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIvYnVpbGRzL291dGlscy9jaGFydGVncmFwaGlxdWUvbGlicmFpcmllLWFuZ3VsYXIvbGliL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnQvY29sb3ItcGlja2VyL2NvbG9yLXBpY2tlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBRUwsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osVUFBVSxFQUNWLFlBQVksRUFDWixLQUFLLEVBQ0wsTUFBTSxFQUNOLFNBQVMsRUFDVCxTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUF3QixpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBY3pFLE1BQU0sT0FBTyxvQkFBb0I7Ozs7O0lBOEIvQixZQUFvQixTQUFvQixFQUFVLE9BQW1CO1FBQWpELGNBQVMsR0FBVCxTQUFTLENBQVc7UUFBVSxZQUFPLEdBQVAsT0FBTyxDQUFZOztRQXZCNUQsU0FBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLGtCQUFrQjs7UUFHdkMsWUFBTyxHQUF5QixJQUFJLFlBQVksRUFBRSxDQUFDO1FBRW5ELFdBQU0sR0FBRyxLQUFLLENBQUMsQ0FBSyxpQ0FBaUM7O1FBQ3JELGFBQVEsR0FBRyxLQUFLLENBQUMsQ0FBRyxpQ0FBaUM7O1FBQ3JELGFBQVEsR0FBRyxLQUFLLENBQUM7Ozs7Ozs7UUFTakIsUUFBRyxHQUFHLENBQUMsQ0FBQztRQUNSLGVBQVUsR0FBRyxDQUFDLENBQUM7UUFDZixVQUFLLEdBQUcsQ0FBQyxDQUFDOztRQUdWLFlBQU8sR0FBRyxtSEFBbUgsQ0FBQzs7Ozs7UUF1SzlILGFBQVE7OztRQUFRLEdBQUcsRUFBRTtZQUNuQixxQ0FBcUM7UUFDdkMsQ0FBQyxFQUFDO1FBRUYsY0FBUzs7O1FBQVEsR0FBRyxFQUFFO1lBQ3BCLHFDQUFxQztRQUN2QyxDQUFDLEVBQUM7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QUFvQixFQUFDO3dCQUNuRCxLQUFLLEVBQUUsSUFBSTtxQkFDWjtpQkFDRjs7YUFDRjs7OztZQWhCQyxTQUFTO1lBTlQsVUFBVTs7O3FCQXlCVCxTQUFTLFNBQUMsUUFBUTtxQkFDbEIsU0FBUyxTQUFDLFFBQVE7c0JBQ2xCLFNBQVMsU0FBQyxTQUFTO29CQUNuQixTQUFTLFNBQUMsT0FBTzttQkFFakIsS0FBSztzQkFFTCxNQUFNO29CQWlDTixLQUFLO3NCQTRGTCxZQUFZLFNBQUMsa0JBQWtCLEVBQUUsRUFBRTt3QkFVbkMsWUFBWSxTQUFDLG9CQUFvQixFQUFFLENBQUMsUUFBUSxDQUFDOzs7O0lBOUk5QyxzQ0FBNEI7O0lBQzVCLHNDQUE0Qjs7SUFDNUIsdUNBQThCOztJQUM5QixxQ0FBMEI7O0lBRTFCLG9DQUFvQjs7SUFFcEIsdUNBQ21EOztJQUVuRCxzQ0FBZTs7SUFDZix3Q0FBaUI7O0lBQ2pCLHdDQUFpQjs7Ozs7Ozs7SUFTakIsbUNBQVE7O0lBQ1IsMENBQWU7O0lBQ2YscUNBQVU7O0lBR1YsdUNBQThIOzs7OztJQUs5SCxzQ0FBZTs7Ozs7O0lBa0tmLHdDQUVFOztJQUVGLHlDQUVFOzs7OztJQTNLVSx5Q0FBNEI7Ozs7O0lBQUUsdUNBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIGZvcndhcmRSZWYsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgUmVuZGVyZXIyLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2xzLWNvbG9yLXBpY2tlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9jb2xvci1waWNrZXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9jb2xvci1waWNrZXIuY29tcG9uZW50LnNjc3MnXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBDb2xvclBpY2tlckNvbXBvbmVudCksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgQ29sb3JQaWNrZXJDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgQWZ0ZXJWaWV3SW5pdCB7XG5cbiAgQFZpZXdDaGlsZCgncGlja2VyJykgcGlja2VyOyAgICAvLyBzcXVhcmUgd2l0aCBncmFkaWVudFxuICBAVmlld0NoaWxkKCdzbGlkZXInKSBzbGlkZXI7ICAgIC8vIGh1ZSBzbGlkZXJcbiAgQFZpZXdDaGlsZCgncG9pbnRlcicpIHBvaW50ZXI7ICAvLyBjb2xvciBwb2ludGVyXG4gIEBWaWV3Q2hpbGQoJ2lucHV0JykgaW5wdXQ7ICAgICAgLy8gaW5wdXQgZm9yIGhleCBjb2xvclxuXG4gIEBJbnB1dCgpIHNpemUgPSAyMDA7IC8vIGhlaWdodCA9PSB3aWR0aFxuXG4gIEBPdXRwdXQoKSAvLyBFbWl0IG9uICdjb2xvcicgcHJvcGVydHkgY2hhbmdlZFxuICBjaGFuZ2VkOiBFdmVudEVtaXR0ZXI8c3RyaW5nPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBpc2Rvd24gPSBmYWxzZTsgICAgIC8vIG1vdXNlIGRvd24gb24gJ3NsaWRlcicgZWxlbWVudFxuICBzcUlzRG93biA9IGZhbHNlOyAgIC8vIG1vdXNlIGRvd24gb24gJ3BpY2tlcicgZWxlbWVudFxuICBpc0hpZGRlbiA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBUaGUgZWxlbWVudCBtYWtlIGFuIEhTViBhcyBpdCdzIG11Y2ggbW9yZSBlYXN5IHRvIGNhbGN1bGF0ZSB3aXRoIGEgY29sb3IgcGlja2VyXG4gICAqIEggOiBodWVcbiAgICogUyA6IHNhdHVyYXRpb25cbiAgICogViA6IHZhbHVlXG4gICAqL1xuXG4gIGh1ZSA9IDA7XG4gIHNhdHVyYXRpb24gPSAwO1xuICB2YWx1ZSA9IDA7XG5cbiAgLy8gVGhpcyBwcm9wZXJ0eSBpcyB1c2VkIHRvIGNhbGN1bGF0ZSAncGlja2VyJyBiYWNrZ3JvdW5kIHdpdGggc3BlY2lmaWMgaHVlLCB3ZSB1c2UgJ2hzbCcgd2l0aCBjdXJyZW50ICdodWUnXG4gIGNzc3Byb3AgPSAnbGluZWFyLWdyYWRpZW50KHRvIHRvcCwgIzAwMDAwMCwgcmdiYSgyNTUsMjU1LDI1NSwwKSksIGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgI2ZmZmZmZiAsIGhzbCglaHVlJSwgMTAwJSwgNTAlKSknO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXIyOiBSZW5kZXJlcjIsIHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZikge1xuICB9XG5cbiAgcHJpdmF0ZSBfY29sb3I7IC8vIFByaXZhdGUgY29sb3IsIGFzIHdlIG5lZWQgc2V0dGVyIGFuZCBnZXR0ZXIgdG8gbGlzdGVuIHRvIGNoYW5nZVxuXG4gIC8qKioqKioqXG4gICAqIERlZmluZSBjb2xvciBnZXR0ZXIgYW5kIHNldHRlclxuICAgKi9cbiAgZ2V0IGNvbG9yKCkge1xuICAgIHJldHVybiB0aGlzLl9jb2xvcjtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBjb2xvcih2YWx1ZSkge1xuICAgIHRoaXMuZGVmaW5lQ29sb3IodmFsdWUpO1xuICB9XG5cbiAgLyoqKioqKipcbiAgICogRGVmaW5lICdpZCcgb2YgaW5wdXQgZWxlbWVudCBhbmQgcmVtb3ZlIGlkIG9mIGN1cnJlbnQgZWxlbWVudFxuICAgKi9cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIGNvbnN0IGlkID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgIHRoaXMucmVuZGVyZXIyLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ2lkJyk7XG4gICAgdGhpcy5yZW5kZXJlcjIuc2V0QXR0cmlidXRlKHRoaXMuaW5wdXQubmF0aXZlRWxlbWVudCwgJ2lkJywgaWQpO1xuICAgIHRoaXMuZGVmaW5lQ29sb3IodGhpcy5jb2xvcik7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGNvbG9yIG9mICdzbGlkZXInIGFuZCAncGlja2VyJyBvbiAnaHVlJyBjaGFuZ2VcbiAgICovXG4gIGNoYW5nZVBpY2tlckNvbG9yKCkge1xuICAgIGlmICh0aGlzLnNsaWRlcikge1xuICAgICAgdGhpcy5yZW5kZXJlcjIuc2V0U3R5bGUodGhpcy5zbGlkZXIubmF0aXZlRWxlbWVudCwgJ2JhY2tncm91bmQnLCAnaHNsKCVodWUlLCAxMDAlLCA1MCUpJy5yZXBsYWNlKCclaHVlJScsICcnICsgdGhpcy5odWUpKTtcbiAgICAgIHRoaXMucmVuZGVyZXIyLnNldFN0eWxlKHRoaXMucGlja2VyLm5hdGl2ZUVsZW1lbnQsICdiYWNrZ3JvdW5kJywgdGhpcy5jc3Nwcm9wLnJlcGxhY2UoJyVodWUlJywgJycgKyB0aGlzLmh1ZSkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgX2NvbG9yIHByb3BlcnR5IG9uIGNoYW5nZSwgYW5kIGVtaXQgb25DaGFuZ2UgZXZlbnQgZm9yIG5nTW9kZWxcbiAgICovXG4gIHBpY2tlckNoYW5nZSgpIHtcbiAgICBjb25zdCByZ2IgPSB0aGlzLmhzdlRvUmdiKCk7XG4gICAgY29uc3QgaGV4ID0gJyMnICsgKCcwMCcgKyByZ2JbMF0udG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkpLnNsaWNlKC0yKSArXG4gICAgICAoJzAwJyArIHJnYlsxXS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSkuc2xpY2UoLTIpICtcbiAgICAgICgnMDAnICsgcmdiWzJdLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpKS5zbGljZSgtMik7XG5cbiAgICB0aGlzLl9jb2xvciA9IGhleDtcbiAgICB0aGlzLm9uQ2hhbmdlKGhleCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0ICdzbGlkZXInIHBvc2l0aW9uIHdpdGggJ2h1ZScgdmFsdWVcbiAgICovXG4gIGh1ZVBvc2l0aW9uKCkge1xuICAgIGNvbnN0IHB4ID0gTWF0aC5yb3VuZChNYXRoLm1heCh0aGlzLmh1ZSAqICh0aGlzLnNpemUgLSAyNCkgLyAzNjAsIDApKTtcbiAgICBpZiAodGhpcy5zbGlkZXIpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIyLnNldFN0eWxlKHRoaXMuc2xpZGVyLm5hdGl2ZUVsZW1lbnQsICdsZWZ0JywgcHggLSAxMiArICdweCcpO1xuICAgIH1cbiAgICB0aGlzLmNoYW5nZVBpY2tlckNvbG9yKCk7XG4gICAgdGhpcy5waWNrZXJDaGFuZ2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgJ3BvaW50ZXInIHBvc2l0aW9uIHdpdGggJ3NhdHVyYXRpb24nIGFuZCAndmFsdWUnIHZhbHVlc1xuICAgKi9cbiAgc3FQb3NpdGlvbigpIHtcbiAgICBpZiAodGhpcy5wb2ludGVyKSB7XG4gICAgICBjb25zdCBweCA9IE1hdGgucm91bmQoTWF0aC5tYXgodGhpcy5zYXR1cmF0aW9uICogdGhpcy5zaXplIC8gMTAwLCAwKSk7XG4gICAgICB0aGlzLnJlbmRlcmVyMi5zZXRTdHlsZSh0aGlzLnBvaW50ZXIubmF0aXZlRWxlbWVudCwgJ2xlZnQnLCBweCAtIDEyICsgJ3B4Jyk7XG5cbiAgICAgIGNvbnN0IHB5ID0gTWF0aC5yb3VuZChNYXRoLm1heCgoMTAwIC0gdGhpcy52YWx1ZSkgKiB0aGlzLnNpemUgLyAxMDAsIDApKTtcbiAgICAgIHRoaXMucmVuZGVyZXIyLnNldFN0eWxlKHRoaXMucG9pbnRlci5uYXRpdmVFbGVtZW50LCAndG9wJywgcHkgLSAxMiArICdweCcpO1xuXG4gICAgICB0aGlzLnBpY2tlckNoYW5nZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKioqKioqKlxuICAgKiBXaGVuIHdlIGNoYW5nZSAnaHVlJyB3aXRoIG1vdXNlIGNsaWNrLCBqdXN0ZSBnbyB0byB0aGUgcG9zaXRpb24gYW5kIGVtaXQgY29sb3IgY2hhbmdlXG4gICAqIEBwYXJhbSBldmVudCB0aGUgbW91c2UgY2xpY2sgZXZlbnRcbiAgICovXG4gIGNoYW5nZUh1ZShldmVudCkge1xuICAgIHRoaXMuaHVlID0gTWF0aC5yb3VuZChldmVudC5vZmZzZXRYICogMzYwIC8gZXZlbnQudGFyZ2V0LmNsaWVudFdpZHRoKTtcbiAgICB0aGlzLmh1ZVBvc2l0aW9uKCk7XG4gICAgdGhpcy5jaGFuZ2VkLmVtaXQodGhpcy5fY29sb3IpO1xuICB9XG5cbiAgZGVmaW5lQ29sb3IoY29sb3IpIHtcbiAgICBpZiAoY29sb3IgJiYgY29sb3IubGVuZ3RoID09PSA3KSB7XG4gICAgICB0aGlzLl9jb2xvciA9IGNvbG9yO1xuICAgICAgY29uc3QgUiA9IHBhcnNlSW50KHRoaXMuX2NvbG9yLnN1YnN0cmluZygxLCAzKSwgMTYpO1xuICAgICAgY29uc3QgRyA9IHBhcnNlSW50KHRoaXMuX2NvbG9yLnN1YnN0cmluZygzLCA1KSwgMTYpO1xuICAgICAgY29uc3QgQiA9IHBhcnNlSW50KHRoaXMuX2NvbG9yLnN1YnN0cmluZyg1KSwgMTYpO1xuICAgICAgdGhpcy5yZ2JUb0hzdihSLCBHLCBCKTtcbiAgICAgIHRoaXMuaHVlUG9zaXRpb24oKTtcbiAgICAgIHRoaXMuc3FQb3NpdGlvbigpO1xuXG4gICAgICB0aGlzLmNoYW5nZWQuZW1pdCh0aGlzLl9jb2xvcik7XG4gICAgfVxuICB9XG5cbiAgLyoqKipcbiAgICogRXZlbnRzIGhhbmRsZXJzIDogbW91c2V1cCwgbW91c2Vtb3ZlIGFuZCBtb3VzZWRvd25cbiAgICovXG4gIEBIb3N0TGlzdGVuZXIoJ2RvY3VtZW50Om1vdXNldXAnLCBbXSlcbiAgbW91c2VVcCgpIHtcbiAgICBpZiAodGhpcy5pc2Rvd24gfHwgdGhpcy5zcUlzRG93bikge1xuICAgICAgLy8gVHJpZ2dlciBldmVudCBvbmx5IGlmIGl0IHdhcyBjbGlja2VkXG4gICAgICB0aGlzLmNoYW5nZWQuZW1pdCh0aGlzLl9jb2xvcik7XG4gICAgfVxuICAgIHRoaXMuaXNkb3duID0gZmFsc2U7XG4gICAgdGhpcy5zcUlzRG93biA9IGZhbHNlO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignZG9jdW1lbnQ6bW91c2Vtb3ZlJywgWyckZXZlbnQnXSlcbiAgbW91c2VNb3ZlKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuaXNkb3duKSB7XG4gICAgICBjb25zdCByZWN0ID0gdGhpcy5zbGlkZXIubmF0aXZlRWxlbWVudC5wYXJlbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgY29uc3QgcG9zaXRpb24gPSBldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0O1xuXG4gICAgICB0aGlzLmh1ZSA9IE1hdGgucm91bmQocG9zaXRpb24gKiAzNjAgLyByZWN0LndpZHRoKTtcbiAgICAgIGlmICh0aGlzLmh1ZSA+IDM2MCkge1xuICAgICAgICB0aGlzLmh1ZSA9IDM2MDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5odWUgPCAwKSB7XG4gICAgICAgIHRoaXMuaHVlID0gMDtcbiAgICAgIH1cbiAgICAgIHRoaXMuaHVlUG9zaXRpb24oKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3FJc0Rvd24pIHtcbiAgICAgIGNvbnN0IHJlY3QgPSB0aGlzLnBvaW50ZXIubmF0aXZlRWxlbWVudC5wYXJlbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgY29uc3QgeHBvc2l0aW9uID0gZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdDtcblxuICAgICAgdGhpcy5zYXR1cmF0aW9uID0gTWF0aC5yb3VuZCh4cG9zaXRpb24gKiAxMDAgLyByZWN0LndpZHRoKTtcbiAgICAgIGlmICh0aGlzLnNhdHVyYXRpb24gPiAxMDApIHtcbiAgICAgICAgdGhpcy5zYXR1cmF0aW9uID0gMTAwO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnNhdHVyYXRpb24gPCAwKSB7XG4gICAgICAgIHRoaXMuc2F0dXJhdGlvbiA9IDA7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHlwb3NpdGlvbiA9IGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcDtcblxuICAgICAgdGhpcy52YWx1ZSA9IDEwMCAtIE1hdGgucm91bmQoeXBvc2l0aW9uICogMTAwIC8gcmVjdC5oZWlnaHQpO1xuICAgICAgaWYgKHRoaXMudmFsdWUgPiAxMDApIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IDEwMDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy52YWx1ZSA8IDApIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc3FQb3NpdGlvbigpO1xuICAgIH1cbiAgfVxuXG4gIGh1ZW1vdXNlRG93bigpIHtcbiAgICB0aGlzLmlzZG93biA9IHRydWU7XG4gIH1cblxuICBzcW1vdXNlRG93bihldmVudCkge1xuICAgIHRoaXMuc3FJc0Rvd24gPSB0cnVlO1xuICAgIHRoaXMubW91c2VNb3ZlKGV2ZW50KTtcbiAgfVxuXG5cbiAgLyoqKioqKlxuICAgKiBuZ01vZGVsIHJlcXVpcmVkIGZ1bmN0aW9uc1xuICAgKi9cbiAgb25DaGFuZ2U6IGFueSA9ICgpID0+IHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6c2VtaWNvbG9uXG4gIH07XG5cbiAgb25Ub3VjaGVkOiBhbnkgPSAoKSA9PiB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnNlbWljb2xvblxuICB9O1xuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm4pIHtcbiAgICB0aGlzLm9uQ2hhbmdlID0gZm47XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZChmbikge1xuICAgIHRoaXMub25Ub3VjaGVkID0gZm47XG4gIH1cblxuICB3cml0ZVZhbHVlKHZhbHVlKSB7XG4gICAgdGhpcy5kZWZpbmVDb2xvcih2YWx1ZSk7XG4gIH1cblxuXG4gIC8qKioqKioqKipcbiAgICogVXRpbHMgZm9uY3Rpb25zLCBjb252ZXJ0IEhTViA8LT4gUkdCXG4gICAqL1xuICBoc3ZUb1JnYigpIHtcbiAgICBjb25zdCBIID0gdGhpcy5odWU7XG4gICAgY29uc3QgViA9IHRoaXMudmFsdWUgLyAxMDA7XG4gICAgY29uc3QgUyA9IHRoaXMuc2F0dXJhdGlvbiAvIDEwMDtcblxuICAgIGNvbnN0IEMgPSBWICogUztcbiAgICBjb25zdCBYID0gQyAqICgxIC0gTWF0aC5hYnMoKEggLyA2MCkgJSAyIC0gMSkpO1xuICAgIGNvbnN0IG0gPSBWIC0gQztcblxuICAgIGxldCBwcmltZSA9IFtDLCAwLCBYXTtcblxuICAgIGlmIChIIDwgNjApIHtcbiAgICAgIHByaW1lID0gW0MsIFgsIDBdO1xuICAgIH0gZWxzZSBpZiAoSCA8IDEyMCkge1xuICAgICAgcHJpbWUgPSBbWCwgQywgMF07XG4gICAgfSBlbHNlIGlmIChIIDwgMTgwKSB7XG4gICAgICBwcmltZSA9IFswLCBDLCBYXTtcbiAgICB9IGVsc2UgaWYgKEggPCAyNDApIHtcbiAgICAgIHByaW1lID0gWzAsIFgsIENdO1xuICAgIH0gZWxzZSBpZiAoSCA8IDMwMCkge1xuICAgICAgcHJpbWUgPSBbWCwgMCwgQ107XG4gICAgfVxuXG4gICAgcmV0dXJuIFtcbiAgICAgIE1hdGgucm91bmQoKHByaW1lWzBdICsgbSkgKiAyNTUpLFxuICAgICAgTWF0aC5yb3VuZCgocHJpbWVbMV0gKyBtKSAqIDI1NSksXG4gICAgICBNYXRoLnJvdW5kKChwcmltZVsyXSArIG0pICogMjU1KVxuICAgIF07XG4gIH1cblxuICByZ2JUb0hzdihSLCBHLCBCKSB7XG4gICAgY29uc3QgUnAgPSBSIC8gMjU1O1xuICAgIGNvbnN0IEdwID0gRyAvIDI1NTtcbiAgICBjb25zdCBCcCA9IEIgLyAyNTU7XG5cbiAgICBjb25zdCBDbWF4ID0gTWF0aC5tYXgoUnAsIEdwLCBCcCk7XG4gICAgY29uc3QgQ21pbiA9IE1hdGgubWluKFJwLCBHcCwgQnApO1xuXG4gICAgY29uc3QgRGVsdGEgPSBDbWF4IC0gQ21pbjtcbiAgICBsZXQgSCA9IDA7XG5cbiAgICBpZiAoRGVsdGEgPT09IDApIHtcbiAgICAgIEggPSAwO1xuICAgIH0gZWxzZSBpZiAoQ21heCA9PT0gUnApIHtcbiAgICAgIEggPSA2MCAqICgoR3AgLSBCcCkgLyBEZWx0YSAlIDYpO1xuICAgIH0gZWxzZSBpZiAoQ21heCA9PT0gR3ApIHtcbiAgICAgIEggPSA2MCAqICgoQnAgLSBScCkgLyBEZWx0YSArIDIpO1xuICAgIH0gZWxzZSBpZiAoQ21heCA9PT0gQnApIHtcbiAgICAgIEggPSA2MCAqICgoUnAgLSBHcCkgLyBEZWx0YSArIDQpO1xuICAgIH1cblxuICAgIGxldCBTID0gMDtcblxuICAgIGlmIChDbWF4ICE9PSAwKSB7XG4gICAgICBTID0gRGVsdGEgLyBDbWF4O1xuICAgIH1cblxuICAgIHRoaXMuaHVlID0gSDtcbiAgICB0aGlzLnNhdHVyYXRpb24gPSBTICogMTAwO1xuICAgIHRoaXMudmFsdWUgPSBDbWF4ICogMTAwO1xuICB9XG59XG4iXX0=