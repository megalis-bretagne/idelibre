/**
 * @fileoverview added by tsickle
 * Generated from: lib/component/buttons/button/button.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, Renderer2, ViewChild } from '@angular/core';
import { CommonIcons } from '../../../icons/common-icons';
import { Weight } from '../../../ui-concepts/weight';
import { Style } from '../../../ui-concepts/style';
import { CommonStylesConstants } from '../../../ui-concepts/common-styles-constants';
import { IconSize } from '../../../ui-concepts/icon.size';
export class ButtonComponent {
    /**
     * @param {?} el
     * @param {?} renderer2
     */
    constructor(el, renderer2) {
        this.el = el;
        this.renderer2 = renderer2;
        this.weight = Weight.PRIMARY;
        this.style = Style.NORMAL;
        this.additionalClasses = '';
        this.disabled = false;
        this.processing = false;
        // Buggy functionality. Disabled.
        this.onlyIcon = false;
        this.colorOnHover = false;
        this.iconOnLeft = true;
        this.iconSize = IconSize.NORMAL;
        this.btnClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.processingIcon = this.icon ? this.processingIcon || CommonIcons.SPINNER_ICON : '';
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.moveAttributeToInput('id');
        this.moveAttributeToInput('tabindex');
        this.moveAttributeToInput('name');
        this.moveAttributeToInput('autofocus');
        this.moveAttributeToInput('type');
        this.moveAttributeToInput('form');
    }
    /**
     * @return {?}
     */
    getIconClasses() {
        /** @type {?} */
        const classes = this.weight === Weight.MENU_ITEM ? `${CommonStylesConstants.getStyleClass(this.style)} ` : '';
        switch (this.iconSize) {
            case IconSize.SMALL:
                return ` ${classes}${CommonStylesConstants.getButtonSmallSizeClass()}`;
            case IconSize.LARGE:
                return ` ${classes}${CommonStylesConstants.getButtonLargeSizeClass()}`;
            default:
                return '';
        }
    }
    /**
     * @return {?}
     */
    getBtnClasses() {
        /** @type {?} */
        const btnClasses = this.additionalClasses ? ` ${this.additionalClasses}` : '';
        if (this.onlyIcon) {
            return `no-text${btnClasses} `
                + (this.colorOnHover
                    ? CommonStylesConstants.getOnHoverStyleClass(this.style)
                    : CommonStylesConstants.getStyleClass(this.style));
        }
        switch (this.weight) {
            case Weight.PRIMARY:
                return `${CommonStylesConstants.getButtonStyleClass(this.style)}${btnClasses}`;
            case Weight.SECONDARY:
                return `${CommonStylesConstants.getButtonOutlineStyleClass(this.style)}${btnClasses}`;
            case Weight.TERTIARY:
                return `${CommonStylesConstants.getButtonLinkStyleClass()}${btnClasses}`;
            case Weight.MENU_ITEM:
                return `${CommonStylesConstants.getButtonMenuItemStyleClass()}${btnClasses}`;
        }
    }
    /**
     * @private
     * @param {?} attributeName
     * @param {?=} defaultValue
     * @return {?}
     */
    moveAttributeToInput(attributeName, defaultValue) {
        /** @type {?} */
        const attribute = this.el.nativeElement.getAttribute(attributeName);
        if (attribute !== null) {
            this.renderer2.removeAttribute(this.el.nativeElement, attributeName);
        }
        if (attribute !== null || defaultValue) {
            this.renderer2.setAttribute(this.buttonElement.nativeElement, attributeName, attribute ? attribute : defaultValue);
        }
    }
}
ButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'ls-button',
                template: "<button #buttonElement [disabled]=\"disabled || processing\"\n        (click)=\"btnClick.emit($event)\"\n        [ngClass]=\"getBtnClasses()\" class=\"btn btn-icon-label\" title=\"{{title}}\" type=\"button\">\n  <span *ngIf=\"iconOnLeft && icon\" [ngClass]=\"processing  ? processingIcon : icon + getIconClasses()\"></span>\n  <span *ngIf=\"title && !onlyIcon\" [innerText]=\"title\"></span>\n  <span *ngIf=\"!iconOnLeft && icon\" [ngClass]=\"processing  ? processingIcon : icon + getIconClasses()\"></span>\n</button>\n",
                styles: [":host .btn{cursor:pointer;white-space:nowrap}:host .btn.no-text{border-radius:0;height:100%;padding:0;width:100%}:host .btn.menu-item{border-radius:0;text-align:left;width:100%}:host .btn:disabled{cursor:not-allowed}:host .btn:not(.no-text-button) span.fa:not(:first-child),:host .btn:not(.no-text-button) span.far:not(:first-child),:host .btn:not(.no-text-button) span.fas:not(:first-child){margin-left:.5rem}:host .btn:not(.no-text-button) span.fa:not(:last-child),:host .btn:not(.no-text-button) span.far:not(:last-child),:host .btn:not(.no-text-button) span.fas:not(:last-child){margin-right:.5rem}"]
            }] }
];
/** @nocollapse */
ButtonComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
ButtonComponent.propDecorators = {
    title: [{ type: Input }],
    icon: [{ type: Input }],
    weight: [{ type: Input }],
    style: [{ type: Input }],
    additionalClasses: [{ type: Input }],
    disabled: [{ type: Input }],
    processing: [{ type: Input }],
    processingIcon: [{ type: Input }],
    colorOnHover: [{ type: Input }],
    iconOnLeft: [{ type: Input }],
    iconSize: [{ type: Input }],
    buttonElement: [{ type: ViewChild, args: ['buttonElement',] }],
    btnClick: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    ButtonComponent.prototype.title;
    /** @type {?} */
    ButtonComponent.prototype.icon;
    /** @type {?} */
    ButtonComponent.prototype.weight;
    /** @type {?} */
    ButtonComponent.prototype.style;
    /** @type {?} */
    ButtonComponent.prototype.additionalClasses;
    /** @type {?} */
    ButtonComponent.prototype.disabled;
    /** @type {?} */
    ButtonComponent.prototype.processing;
    /** @type {?} */
    ButtonComponent.prototype.processingIcon;
    /** @type {?} */
    ButtonComponent.prototype.onlyIcon;
    /** @type {?} */
    ButtonComponent.prototype.colorOnHover;
    /** @type {?} */
    ButtonComponent.prototype.iconOnLeft;
    /** @type {?} */
    ButtonComponent.prototype.iconSize;
    /** @type {?} */
    ButtonComponent.prototype.buttonElement;
    /** @type {?} */
    ButtonComponent.prototype.btnClick;
    /**
     * @type {?}
     * @protected
     */
    ButtonComponent.prototype.el;
    /**
     * @type {?}
     * @protected
     */
    ButtonComponent.prototype.renderer2;
}
//# sourceMappingURL=data:application/json;base64,