/**
 * @fileoverview added by tsickle
 * Generated from: shared/model/workflows/workflow-instance.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { StepState } from "./step-state";
export class WorkflowInstance {
    // This constructor is only valid while we use stub services,
    // It should be replace with a constructor from "circuitRaw"
    // constructor(circuitModel: Circuit, stepInstances?: StepInstance[]) {
    /**
     * @param {?=} instData
     */
    constructor(instData) {
        this.currentStepIdx = 0;
        this.rejected = false;
        this.isOver = false;
        this.id = instData.id;
        this.name = instData.name;
        this.description = instData.description;
        this.rejected = instData.isRejected;
        this.isOver = instData.isOver;
        if (instData.steps) {
            this.steps = instData.steps;
            this.currentStepIdx = instData.steps.findIndex((/**
             * @param {?} step
             * @return {?}
             */
            step => step.state === StepState.CURRENT));
            if (this.currentStepIdx === -1) {
                this.currentStepIdx = 0;
            }
        }
    }
}
if (false) {
    /** @type {?} */
    WorkflowInstance.prototype.id;
    /** @type {?} */
    WorkflowInstance.prototype.name;
    /** @type {?} */
    WorkflowInstance.prototype.description;
    /** @type {?} */
    WorkflowInstance.prototype.currentStepIdx;
    /** @type {?} */
    WorkflowInstance.prototype.steps;
    /** @type {?} */
    WorkflowInstance.prototype.rejected;
    /** @type {?} */
    WorkflowInstance.prototype.isOver;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2Zsb3ctaW5zdGFuY2UuanMiLCJzb3VyY2VSb290IjoiL2J1aWxkcy9vdXRpbHMvY2hhcnRlZ3JhcGhpcXVlL2xpYnJhaXJpZS1hbmd1bGFyL2xpYi9zcmMvd29ya2Zsb3dzL3NyYy8iLCJzb3VyY2VzIjpbInNoYXJlZC9tb2RlbC93b3JrZmxvd3Mvd29ya2Zsb3ctaW5zdGFuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXpDLE1BQU0sT0FBTyxnQkFBZ0I7Ozs7Ozs7SUFZM0IsWUFBWSxRQU9UO1FBZkgsbUJBQWMsR0FBRyxDQUFDLENBQUM7UUFFbkIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixXQUFNLEdBQUcsS0FBSyxDQUFDO1FBY2IsSUFBSSxDQUFDLEVBQUUsR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztRQUMxQixJQUFJLENBQUMsV0FBVyxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUM7UUFDeEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztRQUU5QixJQUFJLFFBQVEsQ0FBQyxLQUFLLEVBQUU7WUFDbEIsSUFBSSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDO1lBQzVCLElBQUksQ0FBQyxjQUFjLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxTQUFTOzs7O1lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLFNBQVMsQ0FBQyxPQUFPLEVBQUMsQ0FBQztZQUN6RixJQUFJLElBQUksQ0FBQyxjQUFjLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBQzlCLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDO2FBQ3pCO1NBQ0Y7SUFDSCxDQUFDO0NBQ0Y7OztJQWxDQyw4QkFBVzs7SUFDWCxnQ0FBYTs7SUFDYix1Q0FBcUI7O0lBQ3JCLDBDQUFtQjs7SUFDbkIsaUNBQXNCOztJQUN0QixvQ0FBaUI7O0lBQ2pCLGtDQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RlcEluc3RhbmNlIH0gZnJvbSBcIi4vc3RlcC1pbnN0YW5jZVwiO1xuaW1wb3J0IHsgU3RlcFN0YXRlIH0gZnJvbSBcIi4vc3RlcC1zdGF0ZVwiO1xuXG5leHBvcnQgY2xhc3MgV29ya2Zsb3dJbnN0YW5jZSB7XG4gIGlkOiBudW1iZXI7XG4gIG5hbWU6IHN0cmluZztcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gIGN1cnJlbnRTdGVwSWR4ID0gMDtcbiAgc3RlcHM6IFN0ZXBJbnN0YW5jZVtdO1xuICByZWplY3RlZCA9IGZhbHNlO1xuICBpc092ZXIgPSBmYWxzZTtcblxuICAvLyBUaGlzIGNvbnN0cnVjdG9yIGlzIG9ubHkgdmFsaWQgd2hpbGUgd2UgdXNlIHN0dWIgc2VydmljZXMsXG4gIC8vIEl0IHNob3VsZCBiZSByZXBsYWNlIHdpdGggYSBjb25zdHJ1Y3RvciBmcm9tIFwiY2lyY3VpdFJhd1wiXG4gIC8vIGNvbnN0cnVjdG9yKGNpcmN1aXRNb2RlbDogQ2lyY3VpdCwgc3RlcEluc3RhbmNlcz86IFN0ZXBJbnN0YW5jZVtdKSB7XG4gIGNvbnN0cnVjdG9yKGluc3REYXRhPzoge1xuICAgIGlkOiBudW1iZXI7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICAgIHN0ZXBzOiBTdGVwSW5zdGFuY2VbXTtcbiAgICBpc1JlamVjdGVkOiBib29sZWFuO1xuICAgIGlzT3ZlcjogYm9vbGVhbjtcbiAgICB9XG4gICkge1xuICAgIHRoaXMuaWQgPSBpbnN0RGF0YS5pZDtcbiAgICB0aGlzLm5hbWUgPSBpbnN0RGF0YS5uYW1lO1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBpbnN0RGF0YS5kZXNjcmlwdGlvbjtcbiAgICB0aGlzLnJlamVjdGVkID0gaW5zdERhdGEuaXNSZWplY3RlZDtcbiAgICB0aGlzLmlzT3ZlciA9IGluc3REYXRhLmlzT3ZlcjtcblxuICAgIGlmIChpbnN0RGF0YS5zdGVwcykge1xuICAgICAgdGhpcy5zdGVwcyA9IGluc3REYXRhLnN0ZXBzO1xuICAgICAgdGhpcy5jdXJyZW50U3RlcElkeCA9IGluc3REYXRhLnN0ZXBzLmZpbmRJbmRleChzdGVwID0+IHN0ZXAuc3RhdGUgPT09IFN0ZXBTdGF0ZS5DVVJSRU5UKTtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnRTdGVwSWR4ID09PSAtMSkge1xuICAgICAgICB0aGlzLmN1cnJlbnRTdGVwSWR4ID0gMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==