/**
 * @fileoverview added by tsickle
 * Generated from: lib/component/libersign/libersign.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LibersignStatus } from './libersign-status.model';
import { BehaviorSubject } from 'rxjs';
/**
 * @abstract
 */
export class LibersignUtil {
    constructor() {
        this.status = new LibersignStatus();
        this.FAVORITEKEY = 'libersign-fav';
        this._signatures = [];
        this.signatures = new BehaviorSubject(this._signatures);
    }
    /**
     * @param {?} cert
     * @return {?}
     */
    set favorite(cert) {
        localStorage.setItem(this.FAVORITEKEY, cert.ID);
        this._favorite = cert;
    }
    /**
     * @return {?}
     */
    get favorite() {
        if (this._favorite !== undefined) {
            return this._favorite;
        }
        else {
            /** @type {?} */
            const id = localStorage.getItem(this.FAVORITEKEY);
            for (const cert of this.certificates) {
                if (cert.ID === id) {
                    this._favorite = cert;
                    return cert;
                }
            }
        }
        return undefined;
    }
    /**
     * @param {?} dataToSign
     * @return {?}
     */
    sign(dataToSign) {
        this.status.dataToSignLoading = false;
        this.status.signLoading = true;
        this.doSign(dataToSign);
    }
    /**
     * @return {?}
     */
    commonLoadCert() {
        this.status.certsLoading = false;
        this.status.certsLoaded = true;
    }
}
if (false) {
    /** @type {?} */
    LibersignUtil.prototype.status;
    /** @type {?} */
    LibersignUtil.prototype.certificates;
    /** @type {?} */
    LibersignUtil.prototype.currentCert;
    /** @type {?} */
    LibersignUtil.prototype._favorite;
    /** @type {?} */
    LibersignUtil.prototype.FAVORITEKEY;
    /** @type {?} */
    LibersignUtil.prototype.signatures;
    /** @type {?} */
    LibersignUtil.prototype._signatures;
    /**
     * @abstract
     * @param {?} updateUrl
     * @param {?} appletUrl
     * @return {?}
     */
    LibersignUtil.prototype.init = function (updateUrl, appletUrl) { };
    /**
     * @abstract
     * @return {?}
     */
    LibersignUtil.prototype.loadCertificates = function () { };
    /**
     * @abstract
     * @param {?} cert
     * @return {?}
     */
    LibersignUtil.prototype.selectCertificate = function (cert) { };
    /**
     * @abstract
     * @param {?} dataToSign
     * @return {?}
     */
    LibersignUtil.prototype.doSign = function (dataToSign) { };
    /**
     * @abstract
     * @return {?}
     */
    LibersignUtil.prototype.destroy = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliZXJzaWduLnV0aWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbGlicmljaWVsL2xzLWNvbXBvc2FudHMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50L2xpYmVyc2lnbi9saWJlcnNpZ24udXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUUzRCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sTUFBTSxDQUFDOzs7O0FBRXJDLE1BQU0sT0FBZ0IsYUFBYTtJQWlCakM7UUFoQkEsV0FBTSxHQUFvQixJQUFJLGVBQWUsRUFBRSxDQUFDO1FBTWhELGdCQUFXLEdBQUcsZUFBZSxDQUFDO1FBRTlCLGdCQUFXLEdBQUcsRUFBRSxDQUFDO1FBU2YsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLGVBQWUsQ0FBUSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDakUsQ0FBQzs7Ozs7SUFFRCxJQUFJLFFBQVEsQ0FBQyxJQUEwQjtRQUNyQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0lBQ3hCLENBQUM7Ozs7SUFDRCxJQUFJLFFBQVE7UUFDVixJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssU0FBUyxFQUFFO1lBQ2hDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztTQUN2QjthQUFNOztrQkFDQyxFQUFFLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1lBQ2pELEtBQUssTUFBTSxJQUFJLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtnQkFDcEMsSUFBSSxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRTtvQkFDbEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7b0JBQ3RCLE9BQU8sSUFBSSxDQUFDO2lCQUNiO2FBQ0Y7U0FDRjtRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7Ozs7O0lBRUQsSUFBSSxDQUFDLFVBQW9CO1FBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUMvQixJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzFCLENBQUM7Ozs7SUFFRCxjQUFjO1FBQ1osSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztJQUNqQyxDQUFDO0NBRUY7OztJQWxEQywrQkFBZ0Q7O0lBRWhELHFDQUFxQzs7SUFDckMsb0NBQWtDOztJQUNsQyxrQ0FBZ0M7O0lBRWhDLG9DQUE4Qjs7SUFDOUIsbUNBQVc7O0lBQ1gsb0NBQWlCOzs7Ozs7O0lBRWpCLG1FQUFvRDs7Ozs7SUFDcEQsMkRBQTRCOzs7Ozs7SUFDNUIsZ0VBQXVEOzs7Ozs7SUFDdkQsMkRBQXNDOzs7OztJQUN0QyxrREFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMaWJlcnNpZ25TdGF0dXMgfSBmcm9tICcuL2xpYmVyc2lnbi1zdGF0dXMubW9kZWwnO1xuaW1wb3J0IHtMaWJlcnNpZ25DZXJ0aWZpY2F0ZX0gZnJvbSAnLi9jZXJ0aWZpY2F0ZS5tb2RlbCc7XG5pbXBvcnQge0JlaGF2aW9yU3ViamVjdH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBMaWJlcnNpZ25VdGlsIHtcbiAgc3RhdHVzOiBMaWJlcnNpZ25TdGF0dXMgPSBuZXcgTGliZXJzaWduU3RhdHVzKCk7XG5cbiAgY2VydGlmaWNhdGVzOiBbTGliZXJzaWduQ2VydGlmaWNhdGVdO1xuICBjdXJyZW50Q2VydDogTGliZXJzaWduQ2VydGlmaWNhdGU7XG4gIF9mYXZvcml0ZTogTGliZXJzaWduQ2VydGlmaWNhdGU7XG5cbiAgRkFWT1JJVEVLRVkgPSAnbGliZXJzaWduLWZhdic7XG4gIHNpZ25hdHVyZXM7XG4gIF9zaWduYXR1cmVzID0gW107XG5cbiAgYWJzdHJhY3QgaW5pdCh1cGRhdGVVcmw6IHN0cmluZywgYXBwbGV0VXJsOiBzdHJpbmcpO1xuICBhYnN0cmFjdCBsb2FkQ2VydGlmaWNhdGVzKCk7XG4gIGFic3RyYWN0IHNlbGVjdENlcnRpZmljYXRlKGNlcnQ6IExpYmVyc2lnbkNlcnRpZmljYXRlKTtcbiAgYWJzdHJhY3QgZG9TaWduKGRhdGFUb1NpZ246IHN0cmluZ1tdKTtcbiAgYWJzdHJhY3QgZGVzdHJveSgpO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc2lnbmF0dXJlcyA9IG5ldyBCZWhhdmlvclN1YmplY3Q8YW55W10+KHRoaXMuX3NpZ25hdHVyZXMpO1xuICB9XG5cbiAgc2V0IGZhdm9yaXRlKGNlcnQ6IExpYmVyc2lnbkNlcnRpZmljYXRlKSB7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5GQVZPUklURUtFWSwgY2VydC5JRCk7XG4gICAgdGhpcy5fZmF2b3JpdGUgPSBjZXJ0O1xuICB9XG4gIGdldCBmYXZvcml0ZSgpIHtcbiAgICBpZiAodGhpcy5fZmF2b3JpdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2Zhdm9yaXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBpZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuRkFWT1JJVEVLRVkpO1xuICAgICAgZm9yIChjb25zdCBjZXJ0IG9mIHRoaXMuY2VydGlmaWNhdGVzKSB7XG4gICAgICAgIGlmIChjZXJ0LklEID09PSBpZCkge1xuICAgICAgICAgIHRoaXMuX2Zhdm9yaXRlID0gY2VydDtcbiAgICAgICAgICByZXR1cm4gY2VydDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgc2lnbihkYXRhVG9TaWduOiBzdHJpbmdbXSkge1xuICAgIHRoaXMuc3RhdHVzLmRhdGFUb1NpZ25Mb2FkaW5nID0gZmFsc2U7XG4gICAgdGhpcy5zdGF0dXMuc2lnbkxvYWRpbmcgPSB0cnVlO1xuICAgIHRoaXMuZG9TaWduKGRhdGFUb1NpZ24pO1xuICB9XG5cbiAgY29tbW9uTG9hZENlcnQoKSB7XG4gICAgdGhpcy5zdGF0dXMuY2VydHNMb2FkaW5nID0gZmFsc2U7XG4gICAgdGhpcy5zdGF0dXMuY2VydHNMb2FkZWQgPSB0cnVlO1xuICB9XG5cbn1cbiJdfQ==