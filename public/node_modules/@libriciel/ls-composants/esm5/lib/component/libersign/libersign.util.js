/**
 * @fileoverview added by tsickle
 * Generated from: lib/component/libersign/libersign.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { LibersignStatus } from './libersign-status.model';
import { BehaviorSubject } from 'rxjs';
/**
 * @abstract
 */
var /**
 * @abstract
 */
LibersignUtil = /** @class */ (function () {
    function LibersignUtil() {
        this.status = new LibersignStatus();
        this.FAVORITEKEY = 'libersign-fav';
        this._signatures = [];
        this.signatures = new BehaviorSubject(this._signatures);
    }
    Object.defineProperty(LibersignUtil.prototype, "favorite", {
        get: /**
         * @return {?}
         */
        function () {
            var e_1, _a;
            if (this._favorite !== undefined) {
                return this._favorite;
            }
            else {
                /** @type {?} */
                var id = localStorage.getItem(this.FAVORITEKEY);
                try {
                    for (var _b = tslib_1.__values(this.certificates), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var cert = _c.value;
                        if (cert.ID === id) {
                            this._favorite = cert;
                            return cert;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return undefined;
        },
        set: /**
         * @param {?} cert
         * @return {?}
         */
        function (cert) {
            localStorage.setItem(this.FAVORITEKEY, cert.ID);
            this._favorite = cert;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} dataToSign
     * @return {?}
     */
    LibersignUtil.prototype.sign = /**
     * @param {?} dataToSign
     * @return {?}
     */
    function (dataToSign) {
        this.status.dataToSignLoading = false;
        this.status.signLoading = true;
        this.doSign(dataToSign);
    };
    /**
     * @return {?}
     */
    LibersignUtil.prototype.commonLoadCert = /**
     * @return {?}
     */
    function () {
        this.status.certsLoading = false;
        this.status.certsLoaded = true;
    };
    return LibersignUtil;
}());
/**
 * @abstract
 */
export { LibersignUtil };
if (false) {
    /** @type {?} */
    LibersignUtil.prototype.status;
    /** @type {?} */
    LibersignUtil.prototype.certificates;
    /** @type {?} */
    LibersignUtil.prototype.currentCert;
    /** @type {?} */
    LibersignUtil.prototype._favorite;
    /** @type {?} */
    LibersignUtil.prototype.FAVORITEKEY;
    /** @type {?} */
    LibersignUtil.prototype.signatures;
    /** @type {?} */
    LibersignUtil.prototype._signatures;
    /**
     * @abstract
     * @param {?} updateUrl
     * @param {?} appletUrl
     * @return {?}
     */
    LibersignUtil.prototype.init = function (updateUrl, appletUrl) { };
    /**
     * @abstract
     * @return {?}
     */
    LibersignUtil.prototype.loadCertificates = function () { };
    /**
     * @abstract
     * @param {?} cert
     * @return {?}
     */
    LibersignUtil.prototype.selectCertificate = function (cert) { };
    /**
     * @abstract
     * @param {?} dataToSign
     * @return {?}
     */
    LibersignUtil.prototype.doSign = function (dataToSign) { };
    /**
     * @abstract
     * @return {?}
     */
    LibersignUtil.prototype.destroy = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliZXJzaWduLnV0aWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbGlicmljaWVsL2xzLWNvbXBvc2FudHMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50L2xpYmVyc2lnbi9saWJlcnNpZ24udXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFM0QsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLE1BQU0sQ0FBQzs7OztBQUVyQzs7OztJQWlCRTtRQWhCQSxXQUFNLEdBQW9CLElBQUksZUFBZSxFQUFFLENBQUM7UUFNaEQsZ0JBQVcsR0FBRyxlQUFlLENBQUM7UUFFOUIsZ0JBQVcsR0FBRyxFQUFFLENBQUM7UUFTZixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksZUFBZSxDQUFRLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQsc0JBQUksbUNBQVE7Ozs7UUFJWjs7WUFDRSxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssU0FBUyxFQUFFO2dCQUNoQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7YUFDdkI7aUJBQU07O29CQUNDLEVBQUUsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7O29CQUNqRCxLQUFtQixJQUFBLEtBQUEsaUJBQUEsSUFBSSxDQUFDLFlBQVksQ0FBQSxnQkFBQSw0QkFBRTt3QkFBakMsSUFBTSxJQUFJLFdBQUE7d0JBQ2IsSUFBSSxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRTs0QkFDbEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7NEJBQ3RCLE9BQU8sSUFBSSxDQUFDO3lCQUNiO3FCQUNGOzs7Ozs7Ozs7YUFDRjtZQUNELE9BQU8sU0FBUyxDQUFDO1FBQ25CLENBQUM7Ozs7O1FBakJELFVBQWEsSUFBMEI7WUFDckMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNoRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN4QixDQUFDOzs7T0FBQTs7Ozs7SUFnQkQsNEJBQUk7Ozs7SUFBSixVQUFLLFVBQW9CO1FBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUMvQixJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzFCLENBQUM7Ozs7SUFFRCxzQ0FBYzs7O0lBQWQ7UUFDRSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7UUFDakMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO0lBQ2pDLENBQUM7SUFFSCxvQkFBQztBQUFELENBQUMsQUFuREQsSUFtREM7Ozs7Ozs7SUFsREMsK0JBQWdEOztJQUVoRCxxQ0FBcUM7O0lBQ3JDLG9DQUFrQzs7SUFDbEMsa0NBQWdDOztJQUVoQyxvQ0FBOEI7O0lBQzlCLG1DQUFXOztJQUNYLG9DQUFpQjs7Ozs7OztJQUVqQixtRUFBb0Q7Ozs7O0lBQ3BELDJEQUE0Qjs7Ozs7O0lBQzVCLGdFQUF1RDs7Ozs7O0lBQ3ZELDJEQUFzQzs7Ozs7SUFDdEMsa0RBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTGliZXJzaWduU3RhdHVzIH0gZnJvbSAnLi9saWJlcnNpZ24tc3RhdHVzLm1vZGVsJztcbmltcG9ydCB7TGliZXJzaWduQ2VydGlmaWNhdGV9IGZyb20gJy4vY2VydGlmaWNhdGUubW9kZWwnO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3R9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTGliZXJzaWduVXRpbCB7XG4gIHN0YXR1czogTGliZXJzaWduU3RhdHVzID0gbmV3IExpYmVyc2lnblN0YXR1cygpO1xuXG4gIGNlcnRpZmljYXRlczogW0xpYmVyc2lnbkNlcnRpZmljYXRlXTtcbiAgY3VycmVudENlcnQ6IExpYmVyc2lnbkNlcnRpZmljYXRlO1xuICBfZmF2b3JpdGU6IExpYmVyc2lnbkNlcnRpZmljYXRlO1xuXG4gIEZBVk9SSVRFS0VZID0gJ2xpYmVyc2lnbi1mYXYnO1xuICBzaWduYXR1cmVzO1xuICBfc2lnbmF0dXJlcyA9IFtdO1xuXG4gIGFic3RyYWN0IGluaXQodXBkYXRlVXJsOiBzdHJpbmcsIGFwcGxldFVybDogc3RyaW5nKTtcbiAgYWJzdHJhY3QgbG9hZENlcnRpZmljYXRlcygpO1xuICBhYnN0cmFjdCBzZWxlY3RDZXJ0aWZpY2F0ZShjZXJ0OiBMaWJlcnNpZ25DZXJ0aWZpY2F0ZSk7XG4gIGFic3RyYWN0IGRvU2lnbihkYXRhVG9TaWduOiBzdHJpbmdbXSk7XG4gIGFic3RyYWN0IGRlc3Ryb3koKTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnNpZ25hdHVyZXMgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGFueVtdPih0aGlzLl9zaWduYXR1cmVzKTtcbiAgfVxuXG4gIHNldCBmYXZvcml0ZShjZXJ0OiBMaWJlcnNpZ25DZXJ0aWZpY2F0ZSkge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMuRkFWT1JJVEVLRVksIGNlcnQuSUQpO1xuICAgIHRoaXMuX2Zhdm9yaXRlID0gY2VydDtcbiAgfVxuICBnZXQgZmF2b3JpdGUoKSB7XG4gICAgaWYgKHRoaXMuX2Zhdm9yaXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9mYXZvcml0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLkZBVk9SSVRFS0VZKTtcbiAgICAgIGZvciAoY29uc3QgY2VydCBvZiB0aGlzLmNlcnRpZmljYXRlcykge1xuICAgICAgICBpZiAoY2VydC5JRCA9PT0gaWQpIHtcbiAgICAgICAgICB0aGlzLl9mYXZvcml0ZSA9IGNlcnQ7XG4gICAgICAgICAgcmV0dXJuIGNlcnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHNpZ24oZGF0YVRvU2lnbjogc3RyaW5nW10pIHtcbiAgICB0aGlzLnN0YXR1cy5kYXRhVG9TaWduTG9hZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuc3RhdHVzLnNpZ25Mb2FkaW5nID0gdHJ1ZTtcbiAgICB0aGlzLmRvU2lnbihkYXRhVG9TaWduKTtcbiAgfVxuXG4gIGNvbW1vbkxvYWRDZXJ0KCkge1xuICAgIHRoaXMuc3RhdHVzLmNlcnRzTG9hZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuc3RhdHVzLmNlcnRzTG9hZGVkID0gdHJ1ZTtcbiAgfVxuXG59XG4iXX0=