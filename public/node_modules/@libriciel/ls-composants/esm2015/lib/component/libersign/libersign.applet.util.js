/**
 * @fileoverview added by tsickle
 * Generated from: lib/component/libersign/libersign.applet.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LibersignUtil } from './libersign.util';
export class LibersignAppletUtil extends LibersignUtil {
    /**
     * @param {?} zone
     */
    constructor(zone) {
        super();
        this.zone = zone;
    }
    /**
     * @param {?} updateUrl
     * @param {?} appletUrl
     * @return {?}
     */
    init(updateUrl, appletUrl) {
        this.status.appletLoading = true;
        this.appletElement = document.getElementById('appletLibersign');
        if (this.appletElement == null) {
            /** @type {?} */
            const appletElement = document.createElement('div');
            appletElement.id = 'appletLibersign';
            document.body.appendChild(appletElement);
            this.appletElement = document.getElementById('appletLibersign');
            // @ts-ignore
            window.appletIsLoaded = (/**
             * @return {?}
             */
            () => {
                this.zone.run((/**
                 * @return {?}
                 */
                () => {
                    this.status.appletLoading = false;
                    this.status.certsLoading = true;
                    this.loadCertificates();
                }));
                this.selectCertificate(this.favorite);
            });
            this.appletElement.innerHTML = `
<applet codebase="${appletUrl}" id="liberSignApplet" code="org/adullact/parapheur/applets/splittedsign/Main.class" archive="SplittedSignatureApplet.jar" name="Signature i-Parapheur" height="0" width="100%">
  <param name="permissions" value="all-permissions">
  <param name="codebase_lookup" value="true">
  <param name="display_cancel" value="true">
  <param name="cancel_mode" value="javascript">
</applet>`;
        }
        else {
            this.zone.run((/**
             * @return {?}
             */
            () => {
                this.status.appletLoading = false;
                this.status.certsLoading = true;
                this.loadCertificates();
            }));
            this.selectCertificate(this.favorite);
        }
    }
    /**
     * @return {?}
     */
    loadCertificates() {
        /** @type {?} */
        const appletElement = document.getElementById('liberSignApplet');
        if (appletElement != null) {
            // @ts-ignore
            /** @type {?} */
            const certStr = document.getElementById('liberSignApplet').getCertificates();
            this.certificates = JSON.parse(certStr)['certs'];
            this.commonLoadCert();
        }
    }
    /**
     * @param {?} cert
     * @return {?}
     */
    selectCertificate(cert) {
        this.zone.run((/**
         * @return {?}
         */
        () => {
            this.currentCert = cert;
        }));
    }
    /**
     * @param {?} dataToSign
     * @return {?}
     */
    doSign(dataToSign) {
        // @ts-ignore
        /** @type {?} */
        const signatureValue = document.getElementById('liberSignApplet').sign(this.currentCert.ID, dataToSign);
        this.zone.run((/**
         * @return {?}
         */
        () => {
            this.signatures.next(JSON.parse(signatureValue));
        }));
    }
    /**
     * @return {?}
     */
    destroy() {
        // @ts-ignore
    }
}
if (false) {
    /** @type {?} */
    LibersignAppletUtil.prototype.appletElement;
    /**
     * @type {?}
     * @private
     */
    LibersignAppletUtil.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliZXJzaWduLmFwcGxldC51dGlsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGxpYnJpY2llbC9scy1jb21wb3NhbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudC9saWJlcnNpZ24vbGliZXJzaWduLmFwcGxldC51dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBSS9DLE1BQU0sT0FBTyxtQkFBb0IsU0FBUSxhQUFhOzs7O0lBR3BELFlBQW9CLElBQVk7UUFDOUIsS0FBSyxFQUFFLENBQUM7UUFEVSxTQUFJLEdBQUosSUFBSSxDQUFRO0lBRWhDLENBQUM7Ozs7OztJQUVELElBQUksQ0FBQyxTQUFpQixFQUFFLFNBQWlCO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztRQUNqQyxJQUFJLENBQUMsYUFBYSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNoRSxJQUFJLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxFQUFFOztrQkFDeEIsYUFBYSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO1lBQ25ELGFBQWEsQ0FBQyxFQUFFLEdBQUcsaUJBQWlCLENBQUM7WUFDckMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7WUFFekMsSUFBSSxDQUFDLGFBQWEsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFFaEUsYUFBYTtZQUNiLE1BQU0sQ0FBQyxjQUFjOzs7WUFBRyxHQUFHLEVBQUU7Z0JBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRzs7O2dCQUFDLEdBQUcsRUFBRTtvQkFDakIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO29CQUNsQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7b0JBQ2hDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO2dCQUMxQixDQUFDLEVBQUMsQ0FBQztnQkFDSCxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3hDLENBQUMsQ0FBQSxDQUFDO1lBRUYsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUc7b0JBQ2pCLFNBQVM7Ozs7O1VBS25CLENBQUM7U0FDTjthQUFNO1lBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHOzs7WUFBQyxHQUFHLEVBQUU7Z0JBQ2pCLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztnQkFDbEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO2dCQUNoQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUMxQixDQUFDLEVBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDdkM7SUFDSCxDQUFDOzs7O0lBRUQsZ0JBQWdCOztjQUNSLGFBQWEsR0FBSSxRQUFRLENBQUMsY0FBYyxDQUFDLGlCQUFpQixDQUFDO1FBQ2pFLElBQUksYUFBYSxJQUFJLElBQUksRUFBRTs7O2tCQUVuQixPQUFPLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLGVBQWUsRUFBRTtZQUM1RSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDakQsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3ZCO0lBQ0gsQ0FBQzs7Ozs7SUFFRCxpQkFBaUIsQ0FBQyxJQUEwQjtRQUMxQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUc7OztRQUFDLEdBQUcsRUFBRTtZQUNqQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUMxQixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBRUQsTUFBTSxDQUFDLFVBQW9COzs7Y0FFbkIsY0FBYyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDO1FBQ3ZHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRzs7O1FBQUMsR0FBRyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUNuRCxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7SUFFRCxPQUFPO1FBQ0wsYUFBYTtJQUNmLENBQUM7Q0FFRjs7O0lBdkVDLDRDQUFjOzs7OztJQUVGLG1DQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TGliZXJzaWduVXRpbH0gZnJvbSAnLi9saWJlcnNpZ24udXRpbCc7XG5pbXBvcnQge05nWm9uZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0xpYmVyc2lnbkNlcnRpZmljYXRlfSBmcm9tICcuL2NlcnRpZmljYXRlLm1vZGVsJztcblxuZXhwb3J0IGNsYXNzIExpYmVyc2lnbkFwcGxldFV0aWwgZXh0ZW5kcyBMaWJlcnNpZ25VdGlsIHtcbiAgYXBwbGV0RWxlbWVudDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHpvbmU6IE5nWm9uZSkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBpbml0KHVwZGF0ZVVybDogc3RyaW5nLCBhcHBsZXRVcmw6IHN0cmluZykge1xuICAgIHRoaXMuc3RhdHVzLmFwcGxldExvYWRpbmcgPSB0cnVlO1xuICAgIHRoaXMuYXBwbGV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHBsZXRMaWJlcnNpZ24nKTtcbiAgICBpZiAodGhpcy5hcHBsZXRFbGVtZW50ID09IG51bGwpIHtcbiAgICAgIGNvbnN0IGFwcGxldEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGFwcGxldEVsZW1lbnQuaWQgPSAnYXBwbGV0TGliZXJzaWduJztcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYXBwbGV0RWxlbWVudCk7XG5cbiAgICAgIHRoaXMuYXBwbGV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHBsZXRMaWJlcnNpZ24nKTtcblxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgd2luZG93LmFwcGxldElzTG9hZGVkID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnpvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICB0aGlzLnN0YXR1cy5hcHBsZXRMb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5zdGF0dXMuY2VydHNMb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLmxvYWRDZXJ0aWZpY2F0ZXMoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2VsZWN0Q2VydGlmaWNhdGUodGhpcy5mYXZvcml0ZSk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmFwcGxldEVsZW1lbnQuaW5uZXJIVE1MID0gYFxuPGFwcGxldCBjb2RlYmFzZT1cIiR7YXBwbGV0VXJsfVwiIGlkPVwibGliZXJTaWduQXBwbGV0XCIgY29kZT1cIm9yZy9hZHVsbGFjdC9wYXJhcGhldXIvYXBwbGV0cy9zcGxpdHRlZHNpZ24vTWFpbi5jbGFzc1wiIGFyY2hpdmU9XCJTcGxpdHRlZFNpZ25hdHVyZUFwcGxldC5qYXJcIiBuYW1lPVwiU2lnbmF0dXJlIGktUGFyYXBoZXVyXCIgaGVpZ2h0PVwiMFwiIHdpZHRoPVwiMTAwJVwiPlxuICA8cGFyYW0gbmFtZT1cInBlcm1pc3Npb25zXCIgdmFsdWU9XCJhbGwtcGVybWlzc2lvbnNcIj5cbiAgPHBhcmFtIG5hbWU9XCJjb2RlYmFzZV9sb29rdXBcIiB2YWx1ZT1cInRydWVcIj5cbiAgPHBhcmFtIG5hbWU9XCJkaXNwbGF5X2NhbmNlbFwiIHZhbHVlPVwidHJ1ZVwiPlxuICA8cGFyYW0gbmFtZT1cImNhbmNlbF9tb2RlXCIgdmFsdWU9XCJqYXZhc2NyaXB0XCI+XG48L2FwcGxldD5gO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnpvbmUucnVuKCgpID0+IHtcbiAgICAgICAgdGhpcy5zdGF0dXMuYXBwbGV0TG9hZGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN0YXR1cy5jZXJ0c0xvYWRpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmxvYWRDZXJ0aWZpY2F0ZXMoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5zZWxlY3RDZXJ0aWZpY2F0ZSh0aGlzLmZhdm9yaXRlKTtcbiAgICB9XG4gIH1cblxuICBsb2FkQ2VydGlmaWNhdGVzKCkge1xuICAgIGNvbnN0IGFwcGxldEVsZW1lbnQgPSAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpYmVyU2lnbkFwcGxldCcpO1xuICAgIGlmIChhcHBsZXRFbGVtZW50ICE9IG51bGwpIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGNvbnN0IGNlcnRTdHIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGliZXJTaWduQXBwbGV0JykuZ2V0Q2VydGlmaWNhdGVzKCk7XG4gICAgICB0aGlzLmNlcnRpZmljYXRlcyA9IEpTT04ucGFyc2UoY2VydFN0cilbJ2NlcnRzJ107XG4gICAgICB0aGlzLmNvbW1vbkxvYWRDZXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgc2VsZWN0Q2VydGlmaWNhdGUoY2VydDogTGliZXJzaWduQ2VydGlmaWNhdGUpIHtcbiAgICB0aGlzLnpvbmUucnVuKCgpID0+IHtcbiAgICAgIHRoaXMuY3VycmVudENlcnQgPSBjZXJ0O1xuICAgIH0pO1xuICB9XG5cbiAgZG9TaWduKGRhdGFUb1NpZ246IHN0cmluZ1tdKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IHNpZ25hdHVyZVZhbHVlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpYmVyU2lnbkFwcGxldCcpLnNpZ24odGhpcy5jdXJyZW50Q2VydC5JRCwgZGF0YVRvU2lnbik7XG4gICAgdGhpcy56b25lLnJ1bigoKSA9PiB7XG4gICAgICB0aGlzLnNpZ25hdHVyZXMubmV4dChKU09OLnBhcnNlKHNpZ25hdHVyZVZhbHVlKSk7XG4gICAgfSk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgfVxuXG59XG4iXX0=