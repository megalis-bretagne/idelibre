import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { BrowserModule } from '@angular/platform-browser';
import { NgbPopover, NgbModule } from '@ng-bootstrap/ng-bootstrap';
import { moveItemInArray, DragDropModule } from '@angular/cdk/drag-drop';
import { Component, ContentChild, Input, EventEmitter, Output, ViewChild, ViewChildren, NgModule } from '@angular/core';
import { __extends, __spread } from 'tslib';

/**
 * @fileoverview added by tsickle
 * Generated from: shared/model/workflows/workflow-model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WorkflowModel = /** @class */ (function () {
    function WorkflowModel() {
        this.steps = [];
    }
    return WorkflowModel;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: shared/model/workflows/step-state.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var StepState = {
    PENDING: "pending",
    CURRENT: "current",
    VALIDATED: "approve",
    SKIPPED: "skipped",
    REJECTED: "rejected",
};

/**
 * @fileoverview added by tsickle
 * Generated from: workflows/ls-workflow-model-viewer/ls-workflow-model-viewer.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LsWorkflowModelViewerComponent = /** @class */ (function () {
    // messages = CircuitDisplayMessages;
    function LsWorkflowModelViewerComponent() {
        this.isInstance = false;
        this.isOver = false;
        this.isRejected = false;
    }
    /**
     * @return {?}
     */
    LsWorkflowModelViewerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.circuit) {
            console.error('Missing input circuit data');
            this.circuit = new WorkflowModel();
        }
        if (!this.messages) {
            throw new Error('Missing localised messages for LsWorkflowViewerComponent!');
        }
        if (!this.getStepIconClassFct) {
            throw new Error('Missing getStepIconClassFct for LsWorkflowViewerComponent!');
        }
        if (!this.getStepTooltipFct) {
            throw new Error('Missing getStepTooltipFct for LsWorkflowViewerComponent!');
        }
    };
    /**
     * @return {?}
     */
    LsWorkflowModelViewerComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        console.debug('LsWorkflowViewerComponent::ngOnChanges, ', this);
        if (this.isInstance) {
            console.debug('LsWorkflowViewerComponent::ngOnChanges - circuit is an instance ');
            /** @type {?} */
            var workflow = (/** @type {?} */ (this.circuit));
            this.activeStep = workflow.currentStepIdx;
            this.isOver = workflow.isOver;
            this.isRejected = workflow.rejected;
        }
    };
    /**
     * @param {?} step
     * @return {?}
     */
    LsWorkflowModelViewerComponent.prototype.getStepIconClass = /**
     * @param {?} step
     * @return {?}
     */
    function (step) {
        return this.getStepIconClassFct(step);
    };
    /**
     * @param {?} step
     * @return {?}
     */
    LsWorkflowModelViewerComponent.prototype.getStepTooltip = /**
     * @param {?} step
     * @return {?}
     */
    function (step) {
        return this.getStepTooltipFct(step);
    };
    /**
     * @param {?} stepIdx
     * @return {?}
     */
    LsWorkflowModelViewerComponent.prototype.isActiveStep = /**
     * @param {?} stepIdx
     * @return {?}
     */
    function (stepIdx) {
        return !this.isRejected && !this.isOver && stepIdx === this.activeStep;
    };
    /**
     * @param {?} step
     * @return {?}
     */
    LsWorkflowModelViewerComponent.prototype.isPassed = /**
     * @param {?} step
     * @return {?}
     */
    function (step) {
        return this.isInstance && ((step.state === StepState.VALIDATED) || (step.state === StepState.REJECTED));
    };
    /**
     * @param {?} step
     * @param {?} validator
     * @return {?}
     */
    LsWorkflowModelViewerComponent.prototype.isActualValidator = /**
     * @param {?} step
     * @param {?} validator
     * @return {?}
     */
    function (step, validator) {
        return this.isInstance && (step.validatedBy.some((/**
         * @param {?} elem
         * @return {?}
         */
        function (elem) { return elem.id === validator.id; })));
    };
    /**
     * @return {?}
     */
    LsWorkflowModelViewerComponent.prototype.isCircuitOver = /**
     * @return {?}
     */
    function () {
        return this.isOver && !this.isRejected;
    };
    /**
     * @return {?}
     */
    LsWorkflowModelViewerComponent.prototype.getCircuitEndAdditionalClasses = /**
     * @return {?}
     */
    function () {
        if (this.getCircuitEndAdditionalClassesFct) {
            return this.getCircuitEndAdditionalClassesFct();
        }
        return '';
    };
    /**
     * @param {?} step
     * @param {?} validator
     * @return {?}
     */
    LsWorkflowModelViewerComponent.prototype.getValidatorClasses = /**
     * @param {?} step
     * @param {?} validator
     * @return {?}
     */
    function (step, validator) {
        if (this.isActualValidator(step, validator)) {
            if (step.state === StepState.REJECTED) {
                return this.messages.REJECTED_BY_ICON_CLASS;
            }
            else {
                return this.messages.VALIDATED_BY_ICON_CLASS;
            }
        }
        return '';
    };
    LsWorkflowModelViewerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ls-workflow-model-viewer',
                    template: "<div class=\"ls-workflow-display\">\n  <div class=\"ls-workflow-canevas\">\n    <div class=\"circuit-start\">\n      <div class=\"ls-workflow-endpoint-content\">\n        <span class=\"ls-workflow-endpoint-icn fa fa fa-2x\" [ngClass]=\"messages.CIRCUIT_START_ICON\"></span>\n        <span class=\"ls-step-bounds-txt\" [innerText]=\"messages.FIRST_STEP_TXT\"></span>\n      </div>\n    </div>\n    <div class=\"steps-container\">\n      <div *ngFor=\"let step of circuit.steps; index as i\" >\n        <div class=\"ls-workflow-display-step-container\">\n          <div  class=\"ls-workflow-step\" [ngClass]=\"isActiveStep(i) ? 'wa-active-step wa-white-icn' : ''\">\n            <div class=\"ls-step-top-line\">\n              <div class=\"step-number\">{{i + 1}}.</div>\n              <div class=\"step-name\">{{step.name}}</div>\n              <div [ngClass]=\"getStepIconClass(step)\" class=\"step-icn fa\" ngbTooltip=\"{{getStepTooltip(step)}}\"></div>\n            </div>\n            <div class=\"ls-display-step-separator\"></div>\n            <div class=\"ls-step-validator-list\" [ngClass]=\"isInstance ? 'wa-circuit-instance' : ''\">\n              <ng-container *ngIf=\"isPassed(step)\">\n                <div *ngFor=\"let validator of step.validators\">\n                  <ng-template\n                    [ngTemplateOutlet]=\"passedStepTemplateRef\"\n                    [ngTemplateOutletContext]=\"{step: step, validator: validator}\">\n                  </ng-template>\n                </div>\n              </ng-container>\n              <ng-container *ngIf=\" ! isPassed(step)\">\n                <div *ngFor=\"let validator of step.validators\">\n                  <ng-template\n                    [ngTemplateOutlet]=\"pendingStepTemplateRef\"\n                    [ngTemplateOutletContext]=\"{step: step, validator: validator}\">\n                  </ng-template>\n                </div>\n              </ng-container>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"ls-workflow-end\">\n      <div class=\"ls-workflow-endpoint-content\" [ngClass]=\"getCircuitEndAdditionalClasses()\">\n        <span class=\"ls-workflow-endpoint-icn fa fa-2x\" [ngClass]=\"messages.CIRCUIT_END_ICON\"></span>\n        <span class=\"ls-step-bounds-txt\" [innerText]=\"messages.LAST_STEP_TXT\"></span>\n      </div>\n    </div>\n  </div>\n</div>\n",
                    styles: ["body{background-color:var(--ls-grey-50)}.active-btn{color:#42a1e8}.ls-workflow-canevas{-ms-grid-column:1;grid-column:1;height:100%;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.ls-workflow-step{background-color:#fff;-webkit-box-shadow:0 0 .25rem rgba(0,0,0,.15);box-shadow:0 0 .25rem rgba(0,0,0,.15);border:none;width:var(--ls-workflow-step-width,20rem);min-height:6rem}.ls-workflow-step .ls-step-top-line{padding:.5rem;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-align:center;-ms-flex-align:center;align-items:center;font-weight:700}.ls-workflow-step .ls-display-step-separator{width:100%;border-bottom:1px solid #d3d3d3}.ls-workflow-step .ls-step-validator-list{padding:.5rem .5rem .5rem 1.5rem;color:#5b5b5b}.ls-workflow-step.selected{-webkit-box-shadow:0 .5rem .25rem rgba(0,0,0,.3);box-shadow:0 .5rem .25rem rgba(0,0,0,.3)}.ls-workflow-step .step-icn{width:1.7rem;height:1.7rem}.ls-workflow-endpoint-content{margin:auto;text-align:center}.ls-workflow-endpoint-content .ls-step-bounds-txt{color:var(--primary);font-weight:700}.ls-workflow-endpoint-content .ls-workflow-endpoint-icn{color:var(--primary)}.ls-workflow-endpoint-content.not-active .ls-step-bounds-txt,.ls-workflow-endpoint-content.not-active .ls-workflow-endpoint-icn{color:#5b5b5b}.ls-workflow-endpoint-content .ls-step-validator-list{text-align:left}.ls-actual-validator{font-weight:700}.ls-actual-validator::before{content:'\\f00c';font-family:FontAwesome;color:var(--primary);font-size:1em;position:absolute;left:.5em}.ls-rejector{font-weight:700}.ls-rejector::before{content:'\\f00d';font-family:FontAwesome;color:var(--danger);font-size:1em;position:absolute;left:.5em}.wa-comment-icon{color:var(--primary);font-size:1em;margin-right:.5em}.ls-workflow-display .ls-workflow-step{padding-left:0;padding-right:0;margin:1rem auto}.ls-workflow-display .ls-workflow-step .ls-step-validator-list{padding:1rem 1rem 1rem .5rem}.ls-workflow-display .ls-workflow-step .ls-step-validator-list.ls-workflow-instance{padding-left:2rem}.ls-workflow-display .ls-workflow-endpoint-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.ls-workflow-display .ls-workflow-endpoint-content .ls-step-bounds-txt{margin-left:.5rem}.ls-workflow-display .ls-step-top-line{-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start;padding-left:.5rem}.ls-workflow-display .ls-step-top-line .step-name{-webkit-box-flex:1;-ms-flex:1;flex:1;margin-left:.7rem}.ls-workflow-display .ls-display-step-separator{width:100%;border-bottom:1px solid #d3d3d3}.ls-workflow-display .ls-workflow-display-step-container{position:relative}.ls-workflow-display .ls-active-step .ls-step-top-line{background-color:var(--primary);color:#fff;margin:0}.ls-workflow-display .ls-active-step .ls-step-top-line .step-icn{color:#fff}.ls-workflow-display .ls-active-step::before{content:'\\f061';font-family:FontAwesome;color:var(--primary);font-size:2em;position:absolute;left:-1em}.ls-workflow-display .ls-active-step.end-step::before{font-size:1.2em}.ls-workflow-end{position:relative}"]
                }] }
    ];
    /** @nocollapse */
    LsWorkflowModelViewerComponent.ctorParameters = function () { return []; };
    LsWorkflowModelViewerComponent.propDecorators = {
        passedStepTemplateRef: [{ type: ContentChild, args: ['passedStepContent',] }],
        pendingStepTemplateRef: [{ type: ContentChild, args: ['pendingStepContent',] }],
        circuit: [{ type: Input }],
        activeStep: [{ type: Input }],
        messages: [{ type: Input }],
        getStepIconClassFct: [{ type: Input }],
        getStepTooltipFct: [{ type: Input }],
        getCircuitEndAdditionalClassesFct: [{ type: Input }],
        isInstance: [{ type: Input }]
    };
    return LsWorkflowModelViewerComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: shared/model/workflows/step-model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StepModel = /** @class */ (function () {
    function StepModel() {
        this.validators = [];
    }
    /**
     * @return {?}
     */
    StepModel.prototype.clone = /**
     * @return {?}
     */
    function () {
        console.log('StepModel::clone');
        /** @type {?} */
        var clone = new StepModel();
        clone.name = this.name;
        clone.type = this.type;
        clone.validators = __spread(this.validators);
        return clone;
    };
    return StepModel;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: shared/model/workflows/workflow-model-options.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WorkflowModelOptions = /** @class */ (function () {
    function WorkflowModelOptions() {
    }
    return WorkflowModelOptions;
}());
var WorkflowModelLocalizedMessages = /** @class */ (function () {
    function WorkflowModelLocalizedMessages() {
    }
    return WorkflowModelLocalizedMessages;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: workflows/ls-workflow-editor/ls-workflow-editor.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LsWorkflowEditorComponent = /** @class */ (function () {
    function LsWorkflowEditorComponent() {
        this.messages = {
            CREATE_STEP_TITLE: 'Ajouter une étape',
            EDIT_STEP_TITLE: 'Modification de l\'étape',
            ADD_STEP_BTN_TXT: 'Ajouter une étape',
            FIRST_STEP_TXT: 'Début',
            LAST_STEP_TXT: 'Fin',
        };
        this.activeOptions = {
            startIconClass: 'far fa-flag',
            endIconClass: 'fas fa-flag-checkered',
            editorGlobalLayoutClass: 'ls-workflow-editor-default-layout',
            additionalFinalEndpointClasses: ''
        };
        this.endpointIsEditable = false;
        this.workflowChange = new EventEmitter();
    }
    Object.defineProperty(LsWorkflowEditorComponent.prototype, "localizedMessages", {
        get: /**
         * @return {?}
         */
        function () {
            return this.messages;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.messages = Object.assign(this.messages, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LsWorkflowEditorComponent.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this.activeOptions;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.activeOptions = Object.assign(this.activeOptions, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LsWorkflowEditorComponent.prototype, "workflow", {
        get: /**
         * @return {?}
         */
        function () {
            return this.workflowData;
        },
        set: /**
         * @param {?} newValue
         * @return {?}
         */
        function (newValue) {
            this.workflowData = newValue;
            this.workflowChange.emit(newValue);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    LsWorkflowEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.workflowData) {
            console.error('Missing input workflow data');
            this.workflowData = new WorkflowModel();
        }
        if (!this.messages) {
            throw new Error('Missing localised messages for LsWorkflowViewerComponent!');
        }
    };
    /**
     * @return {?}
     */
    LsWorkflowEditorComponent.prototype.workflowDataChanged = /**
     * @return {?}
     */
    function () {
        this.workflowChange.emit(this.workflowData);
    };
    /**
     * @param {?} stepIdx
     * @return {?}
     */
    LsWorkflowEditorComponent.prototype.askForStepDeletion = /**
     * @param {?} stepIdx
     * @return {?}
     */
    function (stepIdx) {
        var _this = this;
        console.debug('delete step');
        if (this.confirmStepDeletionFct) {
            this.confirmStepDeletionFct(this.workflowData.steps[stepIdx]).then((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                if (result) {
                    _this.deleteStep(stepIdx);
                }
            }));
        }
        else {
            this.deleteStep(stepIdx);
        }
    };
    /**
     * @param {?} stepData
     * @param {?} idx
     * @return {?}
     */
    LsWorkflowEditorComponent.prototype.confirmStepCreation = /**
     * @param {?} stepData
     * @param {?} idx
     * @return {?}
     */
    function (stepData, idx) {
        this.addStep(stepData, idx);
        this.closeCurrentPopover();
    };
    /**
     * @param {?} stepData
     * @param {?} idx
     * @return {?}
     */
    LsWorkflowEditorComponent.prototype.confirmStepEdition = /**
     * @param {?} stepData
     * @param {?} idx
     * @return {?}
     */
    function (stepData, idx) {
        this.replaceStep(stepData, idx);
        this.closeCurrentPopover();
    };
    /**
     * @return {?}
     */
    LsWorkflowEditorComponent.prototype.confirmFinalStepEdition = /**
     * @return {?}
     */
    function () {
        this.closeCurrentPopover();
    };
    /**
     * @return {?}
     */
    LsWorkflowEditorComponent.prototype.cancelStepEdition = /**
     * @return {?}
     */
    function () {
        this.closeCurrentPopover();
    };
    /**
     * @param {?} idx
     * @return {?}
     */
    LsWorkflowEditorComponent.prototype.cancelStepCreation = /**
     * @param {?} idx
     * @return {?}
     */
    function (idx) {
        this.closeCurrentPopover();
    };
    /**
     * @return {?}
     */
    LsWorkflowEditorComponent.prototype.isFirstStep = /**
     * @return {?}
     */
    function () {
        return (!this.workflowData || this.workflowData.steps.length === 0);
    };
    /**
     * @param {?} idx
     * @return {?}
     */
    LsWorkflowEditorComponent.prototype.getAdditionalStepClass = /**
     * @param {?} idx
     * @return {?}
     */
    function (idx) {
        if (this.currentEditedStepIdx !== null && this.currentEditedStepIdx === idx) {
            return 'selected';
        }
        return '';
    };
    /**
     * @param {?} step
     * @return {?}
     */
    LsWorkflowEditorComponent.prototype.getStepIconClass = /**
     * @param {?} step
     * @return {?}
     */
    function (step) {
        if (this.getStepIconClassFct) {
            return this.getStepIconClassFct(step);
        }
        return '';
    };
    /**
     * @param {?} step
     * @return {?}
     */
    LsWorkflowEditorComponent.prototype.getStepTooltip = /**
     * @param {?} step
     * @return {?}
     */
    function (step) {
        if (this.getStepTooltipFct) {
            return this.getStepTooltipFct(step);
        }
        return '';
    };
    /**
     * @param {?} src
     * @return {?}
     */
    LsWorkflowEditorComponent.prototype.cloneStep = /**
     * @param {?} src
     * @return {?}
     */
    function (src) {
        return src.clone();
    };
    /**
     * @param {?} stepIdx
     * @return {?}
     */
    LsWorkflowEditorComponent.prototype.createStep = /**
     * @param {?} stepIdx
     * @return {?}
     */
    function (stepIdx) {
        var _this = this;
        /** @type {?} */
        var newStep = new StepModel();
        this.currentPopover = this.getCreationPopoverForIdx(stepIdx);
        this.currentPopover.hidden.subscribe((/**
         * @return {?}
         */
        function () { return _this.cancelStepCreation(stepIdx); }));
        this.currentPopover.open({
            stepData: newStep,
            idx: stepIdx,
            cancelStepCreation: this.cancelStepCreation.bind(this),
            confirmStepCreation: this.confirmStepCreation.bind(this)
        });
    };
    /**
     * @param {?} stepIdx
     * @return {?}
     */
    LsWorkflowEditorComponent.prototype.editStep = /**
     * @param {?} stepIdx
     * @return {?}
     */
    function (stepIdx) {
        var _this = this;
        this.currentEditedStepIdx = stepIdx;
        /** @type {?} */
        var editingStep = this.cloneStep(this.workflowData.steps[stepIdx]);
        this.currentPopover = this.getEditionPopoverForIdx(stepIdx);
        this.currentPopover.hidden.subscribe((/**
         * @return {?}
         */
        function () { return _this.cancelStepEdition(); }));
        this.currentPopover.open({
            stepData: editingStep,
            idx: stepIdx,
            cancelStepEdition: this.cancelStepEdition.bind(this),
            confirmStepEdition: this.confirmStepEdition.bind(this)
        });
    };
    /**
     * @return {?}
     */
    LsWorkflowEditorComponent.prototype.editFinalStep = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var editingStep = this.cloneStep(this.lastStepData);
        this.currentPopover = this.endpointPopoverElementRef;
        this.currentPopover.hidden.subscribe((/**
         * @return {?}
         */
        function () { return _this.cancelStepEdition(); }));
        this.currentPopover.open({
            stepData: editingStep,
            cancelStepEdition: this.cancelStepEdition.bind(this),
            confirmStepEdition: this.confirmFinalStepEdition.bind(this)
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    LsWorkflowEditorComponent.prototype.drop = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        moveItemInArray(this.workflowData.steps, event.previousIndex, event.currentIndex);
        this.workflowDataChanged();
    };
    /**
     * @param {?} idx
     * @return {?}
     */
    LsWorkflowEditorComponent.prototype.dragDisabledForIdx = /**
     * @param {?} idx
     * @return {?}
     */
    function (idx) {
        return (this.currentEditedStepIdx !== null && this.currentEditedStepIdx === idx);
    };
    /**
     * @private
     * @return {?}
     */
    LsWorkflowEditorComponent.prototype.closeCurrentPopover = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.currentPopover && this.currentPopover.isOpen()) {
            this.currentPopover.close();
        }
        this.currentPopover = null;
        this.currentEditedStepIdx = null;
    };
    /**
     * @private
     * @param {?} step
     * @param {?} pos
     * @return {?}
     */
    LsWorkflowEditorComponent.prototype.addStep = /**
     * @private
     * @param {?} step
     * @param {?} pos
     * @return {?}
     */
    function (step, pos) {
        this.workflowData.steps.splice(pos, 0, step);
        this.workflowDataChanged();
    };
    /**
     * @private
     * @param {?} newStep
     * @param {?} stepIdx
     * @return {?}
     */
    LsWorkflowEditorComponent.prototype.replaceStep = /**
     * @private
     * @param {?} newStep
     * @param {?} stepIdx
     * @return {?}
     */
    function (newStep, stepIdx) {
        this.workflowData.steps.splice(stepIdx, 1, newStep);
        this.workflowDataChanged();
    };
    /**
     * @private
     * @param {?} stepIdx
     * @return {?}
     */
    LsWorkflowEditorComponent.prototype.deleteStep = /**
     * @private
     * @param {?} stepIdx
     * @return {?}
     */
    function (stepIdx) {
        this.workflowData.steps.splice(stepIdx, 1);
        this.workflowDataChanged();
    };
    /**
     * @private
     * @param {?} idx
     * @return {?}
     */
    LsWorkflowEditorComponent.prototype.getCreationPopoverForIdx = /**
     * @private
     * @param {?} idx
     * @return {?}
     */
    function (idx) {
        /** @type {?} */
        var filteredList = this.allCircuitEditionPopover.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            /** @type {?} */
            var elem = ((/** @type {?} */ (item)))._elementRef;
            if (elem && elem.nativeElement) {
                return elem.nativeElement.hasAttribute('create-btn');
            }
            return true;
        }));
        return filteredList[idx];
    };
    /**
     * @private
     * @param {?} idx
     * @return {?}
     */
    LsWorkflowEditorComponent.prototype.getEditionPopoverForIdx = /**
     * @private
     * @param {?} idx
     * @return {?}
     */
    function (idx) {
        /** @type {?} */
        var filteredList = this.allCircuitEditionPopover.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            /** @type {?} */
            var elem = ((/** @type {?} */ (item)))._elementRef;
            if (elem && elem.nativeElement) {
                return !(elem.nativeElement.hasAttribute('create-btn'));
            }
            return true;
        }));
        return filteredList[idx];
    };
    LsWorkflowEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ls-workflow-editor',
                    template: "<div class=\"ls-workflow-editor\" [ngClass]=\"options.editorGlobalLayoutClass\">\n  <div class=\"ls-workflow-canevas\">\n    <div class=\"ls-workflow-start ls-workflow-endpoint\">\n      <div class=\"ls-workflow-endpoint-content\">\n        <div class=\"ls-workflow-endpoint-icn fa fa-2x\" [ngClass]=\"options.startIconClass\"></div>\n        <div class=\"ls-step-bounds-txt\">{{messages.FIRST_STEP_TXT}}</div>\n      </div>\n    </div>\n    <div class=\"ls-workflow-stepList-container\" cdkDropList (cdkDropListDropped)=\"drop($event)\">\n      <div class=\"ls-workflow-link-container\">\n        <div class=\"ls-workflow-link\"></div>\n        <div [ngClass]=\"isFirstStep() ? 'firstStep' : ''\" class=\"ls-link-button-container\">\n          <div (click)=\"createStep(0)\" [autoClose]=\"'outside'\" [ngbPopover]=\"popCreateContent\"\n               [popoverTitle]=\"messages.popCreateTitle\" class=\"add-step-btn\" create-btn\n               placement=\"right\" popoverClass=\"ls-step-edition-popover\"\n               triggers=\"manual\"\n               autoClose=\"false\">\n            <span class=\"fa fa-plus-circle\"></span>\n            <span class=\"add-step-btn-txt\">{{messages.ADD_STEP_BTN_TXT}}</span>\n          </div>\n        </div>\n      </div>\n\n      <div *ngFor=\"let step of workflowData.steps; index as i\">\n        <div class=\"ls-workflow-step-container\" cdkDrag [cdkDragDisabled]=\"dragDisabledForIdx(i)\">\n          <div [ngClass]=\"getAdditionalStepClass(i)\" class=\"ls-workflow-step\">\n            <div class=\"ls-step-top-line\">\n              <div class=\"step-number\">{{i + 1}}.</div>\n              <div class=\"step-name\">{{step.name}}</div>\n              <div [ngClass]=\"getStepIconClass(step)\" class=\"step-icn fa\" ngbTooltip=\"{{getStepTooltip(step)}}\"></div>\n            </div>\n            <div class=\"ls-step-validator-list\">\n              <ng-template\n                [ngTemplateOutlet]=\"stepDisplayContentRef\"\n                [ngTemplateOutletContext]=\"{step: step}\">\n              </ng-template>\n            </div>\n          </div>\n          <div class=\"ls-workflow-step-external-buttons\">\n            <div (click)=\"editStep(i)\" [autoClose]=\"'outside'\" [ngbPopover]=\"popEditContent\"\n                 [popoverTitle]=\"messages.popEditTitle\" class=\"fa fa-pencil-alt fa-pencil edit-step-btn\"\n                 placement=\"right-top\"\n                 popoverClass=\"ls-step-edition-popover\"\n                 triggers=\"manual\"></div>\n            <div (click)=\"askForStepDeletion(i)\" class=\"fa fa-trash delete-step-btn\"></div>\n          </div>\n        </div>\n\n        <div class=\"ls-workflow-link-container\">\n          <div class=\"ls-workflow-link\"></div>\n          <div class=\"ls-link-button-container\">\n            <div (click)=\"createStep(i + 1)\" [autoClose]=\"'outside'\" [ngbPopover]=\"popCreateContent\"\n                 [popoverTitle]=\"messages.popCreateTitle\" class=\"add-step-btn\" create-btn\n                 placement=\"right\" popoverClass=\"ls-step-edition-popover\"\n                 triggers=\"manual\"\n                 autoClose=\"false\">\n              <span class=\"fa fa-plus-circle\"></span>\n              <span class=\"add-step-btn-txt\">{{messages.ADD_STEP_BTN_TXT}}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    </div>\n    <div class=\"ls-workflow-end ls-workflow-endpoint\" [ngClass]=\"options.additionalFinalEndpointClasses\">\n      <ng-container *ngIf=\"endpointIsEditable\">\n        <div\n          #endpointPopoverHandle\n          (click)=\"editFinalStep()\"\n          [autoClose]=\"'outside'\"\n          [ngbPopover]=\"popEditFinalStepContent\"\n          [popoverTitle]=\"messages.popEditTitle\"\n          class=\"ls-workflow-endpoint-overlay\"\n          placement=\"right\"\n          popoverClass=\"ls-step-edition-popover\"\n          triggers=\"manual\">\n\n        </div>\n      </ng-container>\n      <div class=\"ls-workflow-endpoint-content\">\n        <div class=\"ls-workflow-endpoint-icn-group\">\n          <div class=\"ls-workflow-endpoint-icn fa fa-2x\" [ngClass]=\"options.endIconClass\"></div>\n          <div class=\"ls-step-bounds-txt\">{{messages.LAST_STEP_TXT}}</div>\n        </div>\n        <div *ngIf=\"endpointIsEditable\" class=\"ls-step-validator-list\">\n          <ng-template [ngTemplateOutlet]=\"lastStepDisplayContentRef\">\n          </ng-template>\n        </div>\n      </div>\n\n    </div>\n  </div>\n</div>\n\n<ng-template\n  #popEditContent\n  let-idx=\"idx\"\n  let-stepData=\"stepData\"\n  let-cancelStepEdition=\"cancelStepEdition\"\n  let-confirmStepEdition=\"confirmStepEdition\">\n  <ng-template\n    [ngTemplateOutlet]=\"popEditContentTemplateRef\"\n    [ngTemplateOutletContext]=\"{idx:idx, stepData:stepData, cancelStepEdition:cancelStepEdition, confirmStepEdition:confirmStepEdition}\">\n  </ng-template>\n</ng-template>\n\n<ng-template\n  #popCreateContent\n  let-idx=\"idx\"\n  let-stepData=\"stepData\"\n  let-cancelStepCreation=\"cancelStepCreation\"\n  let-confirmStepCreation=\"confirmStepCreation\">\n  <ng-template\n    [ngTemplateOutlet]=\"popCreateContentTemplateRef\"\n    [ngTemplateOutletContext]=\"{idx:idx, stepData:stepData, cancelStepCreation:cancelStepCreation, confirmStepCreation:confirmStepCreation}\">\n  </ng-template>\n</ng-template>\n\n\n<ng-template\n  #popEditFinalStepContent\n  let-stepData=\"stepData\"\n  let-cancelStepEdition=\"cancelStepEdition\"\n  let-confirmStepEdition=\"confirmStepEdition\">\n  <ng-template\n    [ngTemplateOutlet]=\"endpointPopoverEditContentRef\"\n    [ngTemplateOutletContext]=\"{stepData:stepData, cancelStepEdition:cancelStepEdition, confirmStepEdition:confirmStepEdition, isLastStep:true}\">\n  </ng-template>\n</ng-template>\n",
                    styles: ["body{background-color:var(--ls-grey-50)}.active-btn{color:#42a1e8}.ls-workflow-canevas{-ms-grid-column:1;grid-column:1;height:100%;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.ls-workflow-endpoint.with-content,.ls-workflow-step{background-color:#fff;-webkit-box-shadow:0 0 .25rem rgba(0,0,0,.15);box-shadow:0 0 .25rem rgba(0,0,0,.15);border:none;width:var(--ls-workflow-step-width,20rem);min-height:6rem}.ls-workflow-endpoint.with-content .ls-step-top-line,.ls-workflow-step .ls-step-top-line{padding:.5rem;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-align:center;-ms-flex-align:center;align-items:center;font-weight:700}.ls-workflow-endpoint.with-content .ls-display-step-separator,.ls-workflow-step .ls-display-step-separator{width:100%;border-bottom:1px solid #d3d3d3}.ls-workflow-endpoint.with-content .ls-step-validator-list,.ls-workflow-step .ls-step-validator-list{padding:.5rem .5rem .5rem 1.5rem;color:#5b5b5b}.ls-workflow-step.selected,.selected.ls-workflow-endpoint.with-content{-webkit-box-shadow:0 .5rem .25rem rgba(0,0,0,.3);box-shadow:0 .5rem .25rem rgba(0,0,0,.3)}.ls-workflow-endpoint.with-content .step-icn,.ls-workflow-step .step-icn{width:1.7rem;height:1.7rem}.ls-workflow-endpoint-content{margin:auto;text-align:center}.ls-workflow-endpoint-content .ls-step-bounds-txt{color:var(--primary);font-weight:700}.ls-workflow-endpoint-content .ls-workflow-endpoint-icn{color:var(--primary)}.ls-workflow-endpoint-content.not-active .ls-step-bounds-txt,.ls-workflow-endpoint-content.not-active .ls-workflow-endpoint-icn{color:#5b5b5b}.ls-workflow-endpoint-content .ls-step-validator-list{text-align:left}.ls-horizontal-separation-line{margin-top:2rem;border-bottom:1px solid #5b5b5b}.ls-workflow-endpoint{background-color:#fff;-webkit-box-shadow:0 0 .25rem rgba(0,0,0,.15);box-shadow:0 0 .25rem rgba(0,0,0,.15);border:none;display:-ms-grid;display:grid;width:6rem;height:6rem;border-radius:50%;position:relative}.ls-workflow-endpoint.with-content{display:block;width:var(--ls-workflow-step-width,20rem);border-radius:0}.ls-workflow-endpoint.with-content .ls-workflow-endpoint-content{width:100%;height:100%;padding:.5em}.ls-workflow-endpoint.with-content .ls-workflow-endpoint-content .ls-workflow-endpoint-icn-group{width:100%;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:reverse;-ms-flex-direction:row-reverse;flex-direction:row-reverse;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;padding:0 .5em}.ls-workflow-endpoint.with-content .ls-workflow-endpoint-content .ls-workflow-endpoint-icn-group:after{content:'';display:block;width:2em}.ls-workflow-endpoint .ls-workflow-endpoint-overlay{width:100%;height:100%;position:absolute;left:0;bottom:0;z-index:2;cursor:pointer}.ls-workflow-link{width:0;border:1px solid #222}.cdk-drag-preview .ls-workflow-endpoint.with-content,.cdk-drag-preview .ls-workflow-step{-webkit-box-shadow:0 .5rem .25rem rgba(0,0,0,.3);box-shadow:0 .5rem .25rem rgba(0,0,0,.3)}.cdk-drag-placeholder{min-height:6rem}.cdk-drag-placeholder .ls-workflow-endpoint.with-content,.cdk-drag-placeholder .ls-workflow-step,.cdk-drag-placeholder .ls-workflow-step-external-buttons{display:none}.cdk-drop-list-dragging .cdk-drag{-webkit-transition:-webkit-transform 250ms cubic-bezier(0,0,.2,1);transition:transform 250ms cubic-bezier(0,0,.2,1);transition:transform 250ms cubic-bezier(0,0,.2,1),-webkit-transform 250ms cubic-bezier(0,0,.2,1)}.cdk-drag-animating{-webkit-transition:-webkit-transform .3s cubic-bezier(0,0,.2,1);transition:transform .3s cubic-bezier(0,0,.2,1);transition:transform .3s cubic-bezier(0,0,.2,1),-webkit-transform .3s cubic-bezier(0,0,.2,1)}.ls-workflow-link-container{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;min-height:4rem;min-width:20rem}.ls-workflow-link-container::before{content:\"\";-webkit-box-flex:0;-ms-flex:0 0 calc(50% - 2px);flex:0 0 calc(50% - 2px)}.ls-workflow-link-container .ls-link-button-container{-webkit-box-flex:0;-ms-flex:0 0 calc(50% - 2px);flex:0 0 calc(50% - 2px);-ms-flex-item-align:center;-ms-grid-row-align:center;align-self:center;height:-webkit-min-content;height:-moz-min-content;height:min-content;width:-webkit-min-content;width:-moz-min-content;width:min-content;padding-left:1rem}.ls-workflow-stepList-container{width:100%}.ls-workflow-step-container{-ms-flex-item-align:center;align-self:center;margin-left:auto;margin-right:auto;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.ls-workflow-step-container::before{content:\"\";-webkit-box-flex:0;-ms-flex:0 0 5rem;flex:0 0 5rem}.ls-workflow-step-container .ls-workflow-endpoint.with-content,.ls-workflow-step-container .ls-workflow-step{-ms-flex-item-align:center;-ms-grid-row-align:center;align-self:center}.ls-workflow-step-container .ls-workflow-step-external-buttons{padding-left:1rem;height:-webkit-min-content;height:-moz-min-content;height:min-content;-webkit-box-flex:0;-ms-flex:0 0 5rem;flex:0 0 5rem}.ls-workflow-step-external-buttons{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.ls-workflow-step-external-buttons .edit-step-btn{margin-right:1rem;cursor:pointer}.ls-workflow-step-external-buttons .edit-step-btn:hover{color:var(--primary)}.ls-workflow-step-external-buttons .delete-step-btn{cursor:pointer}.ls-workflow-step-external-buttons .delete-step-btn:hover{color:var(--danger)}.ls-workflow-editor{display:-ms-grid;display:grid;height:100%}.ls-workflow-editor .ls-link-button-container .add-step-btn{width:-webkit-max-content;width:-moz-max-content;width:max-content;cursor:pointer}.ls-workflow-editor .ls-link-button-container .add-step-btn .add-step-btn-txt{margin-left:.5em;opacity:0;-webkit-transition:opacity .2s ease-in-out;transition:opacity .2s ease-in-out}.ls-workflow-editor .ls-link-button-container.firstStep .add-step-btn .add-step-btn-txt,.ls-workflow-editor .ls-link-button-container:hover .add-step-btn .add-step-btn-txt{opacity:100}.ls-workflow-editor-default-layout{-ms-grid-columns:66% auto;grid-template-columns:66% auto;-ms-grid-rows:100%;grid-template-rows:100%}@media (min-width:1400px){.container{max-width:1340px}}@media (min-width:1600px){.container{max-width:1540px}}"]
                }] }
    ];
    /** @nocollapse */
    LsWorkflowEditorComponent.ctorParameters = function () { return []; };
    LsWorkflowEditorComponent.propDecorators = {
        endpointPopoverElementRef: [{ type: ViewChild, args: ['endpointPopoverHandle', { read: NgbPopover },] }],
        allCircuitEditionPopover: [{ type: ViewChildren, args: [NgbPopover,] }],
        popEditContentTemplateRef: [{ type: ContentChild, args: ['popEditContent',] }],
        popCreateContentTemplateRef: [{ type: ContentChild, args: ['popCreateContent',] }],
        endpointPopoverEditContentRef: [{ type: ContentChild, args: ['endpointPopoverEditContent',] }],
        stepDisplayContentRef: [{ type: ContentChild, args: ['stepDisplayContent',] }],
        lastStepDisplayContentRef: [{ type: ContentChild, args: ['lastStepDisplayContent',] }],
        endpointIsEditable: [{ type: Input }],
        getStepIconClassFct: [{ type: Input }],
        getStepTooltipFct: [{ type: Input }],
        confirmStepDeletionFct: [{ type: Input }],
        lastStepData: [{ type: Input }],
        workflowChange: [{ type: Output }],
        localizedMessages: [{ type: Input }],
        options: [{ type: Input }],
        workflow: [{ type: Input }]
    };
    return LsWorkflowEditorComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: shared/model/workflows/workflow-instance.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WorkflowInstance = /** @class */ (function () {
    // This constructor is only valid while we use stub services,
    // It should be replace with a constructor from "circuitRaw"
    // constructor(circuitModel: Circuit, stepInstances?: StepInstance[]) {
    function WorkflowInstance(instData) {
        this.currentStepIdx = 0;
        this.rejected = false;
        this.isOver = false;
        this.id = instData.id;
        this.name = instData.name;
        this.description = instData.description;
        this.rejected = instData.isRejected;
        this.isOver = instData.isOver;
        if (instData.steps) {
            this.steps = instData.steps;
            this.currentStepIdx = instData.steps.findIndex((/**
             * @param {?} step
             * @return {?}
             */
            function (step) { return step.state === StepState.CURRENT; }));
            if (this.currentStepIdx === -1) {
                this.currentStepIdx = 0;
            }
        }
    }
    return WorkflowInstance;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: shared/model/workflows/workflow-instance-option.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WorkflowInstanceOptions = /** @class */ (function (_super) {
    __extends(WorkflowInstanceOptions, _super);
    function WorkflowInstanceOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return WorkflowInstanceOptions;
}(WorkflowModelOptions));

/**
 * @fileoverview added by tsickle
 * Generated from: workflows/ls-workflow-instance-viewer/ls-workflow-instance-viewer.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LsWorkflowInstanceViewerComponent = /** @class */ (function () {
    function LsWorkflowInstanceViewerComponent() {
        this.messages = {
            FIRST_STEP_TXT: 'Start',
            LAST_STEP_TXT: 'End'
        };
        this.reducedMode = true;
        this.isOver = false;
        this.isRejected = false;
        this._options = {
            startIconClass: 'far fa-flag',
            endIconClass: 'fas fa-flag-checkered',
            validatedIconClass: 'fas fa-check',
            rejectedIconClass: 'fas fa-times',
            hideStart: false
        };
    }
    Object.defineProperty(LsWorkflowInstanceViewerComponent.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._options = Object.assign(this._options, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LsWorkflowInstanceViewerComponent.prototype, "localizedMessages", {
        get: /**
         * @return {?}
         */
        function () {
            return this.messages;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.messages = Object.assign(this.messages, value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    LsWorkflowInstanceViewerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        console.warn('instanciating ls workflow instance viewer!');
        if (!this.workflowData) {
            console.error('Missing input circuit data');
            this.workflowData = new WorkflowInstance();
        }
        if (!this.messages) {
            throw new Error('Missing localised messages for LsWorkflowViewerComponent!');
        }
        if (!this.getStepIconClassFct) {
            throw new Error('Missing getStepIconClassFct for LsWorkflowViewerComponent!');
        }
        if (!this.getStepTooltipFct) {
            throw new Error('Missing getStepTooltipFct for LsWorkflowViewerComponent!');
        }
    };
    /**
     * @return {?}
     */
    LsWorkflowInstanceViewerComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        console.debug('LsWorkflowViewerComponent::ngOnChanges, ', this);
        this.activeStep = this.workflowData.currentStepIdx;
        this.isOver = this.workflowData.isOver;
        this.isRejected = this.workflowData.rejected;
    };
    /**
     * @param {?} step
     * @return {?}
     */
    LsWorkflowInstanceViewerComponent.prototype.getStepIconClass = /**
     * @param {?} step
     * @return {?}
     */
    function (step) {
        return this.getStepIconClassFct(step);
    };
    /**
     * @param {?} step
     * @return {?}
     */
    LsWorkflowInstanceViewerComponent.prototype.getStepTooltip = /**
     * @param {?} step
     * @return {?}
     */
    function (step) {
        return this.getStepTooltipFct(step);
    };
    /**
     * @param {?} stepIdx
     * @return {?}
     */
    LsWorkflowInstanceViewerComponent.prototype.isActiveStep = /**
     * @param {?} stepIdx
     * @return {?}
     */
    function (stepIdx) {
        return !this.isRejected && !this.isOver && stepIdx === this.activeStep;
    };
    /**
     * @param {?} step
     * @return {?}
     */
    LsWorkflowInstanceViewerComponent.prototype.isPassed = /**
     * @param {?} step
     * @return {?}
     */
    function (step) {
        return (step.state === StepState.VALIDATED) || (step.state === StepState.REJECTED);
    };
    /**
     * @param {?} step
     * @param {?} validator
     * @return {?}
     */
    LsWorkflowInstanceViewerComponent.prototype.isActualValidator = /**
     * @param {?} step
     * @param {?} validator
     * @return {?}
     */
    function (step, validator) {
        return step.validatedBy.some((/**
         * @param {?} elem
         * @return {?}
         */
        function (elem) { return elem.id === validator.id; }));
    };
    /**
     * @return {?}
     */
    LsWorkflowInstanceViewerComponent.prototype.isCircuitOver = /**
     * @return {?}
     */
    function () {
        return this.isOver && !this.isRejected;
    };
    /**
     * @return {?}
     */
    LsWorkflowInstanceViewerComponent.prototype.getCircuitEndAdditionalClasses = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var classes = [];
        if (this.getCircuitEndAdditionalClassesFct) {
            classes.push(this.getCircuitEndAdditionalClassesFct());
        }
        else {
            classes.push(this._options.additionalFinalEndpointClasses || '');
        }
        if (this.reducedMode) {
            classes.push('reduced-end-step');
        }
        return classes;
    };
    /**
     * @return {?}
     */
    LsWorkflowInstanceViewerComponent.prototype.getAdditionalValidatorListClasses = /**
     * @return {?}
     */
    function () {
        //wa-circuit-instance
    };
    /**
     * @param {?} step
     * @param {?} stepIdx
     * @return {?}
     */
    LsWorkflowInstanceViewerComponent.prototype.getStepAdditionalClasses = /**
     * @param {?} step
     * @param {?} stepIdx
     * @return {?}
     */
    function (step, stepIdx) {
        // this.isActiveStep(stepIdx) ? 'wa-active-step wa-white-icn' : ''
        /** @type {?} */
        var classes = [];
        if (this.isActiveStep(stepIdx)) {
            classes.push('ls-active-step ls-white-icn');
        }
        if (this.reducedMode) {
            classes.push('ls-reduced-step');
        }
        if (!this.reducedMode) {
            if (step.state === StepState.SKIPPED) {
                classes.push('wa-circuit-skipped-step');
            }
        }
        if (step.state === StepState.VALIDATED) {
            classes.push('ls-validated-step');
        }
        return classes;
    };
    /**
     * @param {?} step
     * @param {?} validator
     * @return {?}
     */
    LsWorkflowInstanceViewerComponent.prototype.getValidatorClasses = /**
     * @param {?} step
     * @param {?} validator
     * @return {?}
     */
    function (step, validator) {
        if (this.isActualValidator(step, validator)) {
            if (step.state === StepState.REJECTED) {
                return this.options.rejectedIconClass;
            }
            else {
                return this.options.validatedIconClass;
            }
        }
        return '';
    };
    LsWorkflowInstanceViewerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ls-workflow-instance-viewer',
                    template: "<div class=\"ls-workflow-display\">\n  <div class=\"ls-workflow-canevas\">\n    <div class=\"circuit-start\">\n      <div *ngIf=\"!options.hideStart\" class=\"ls-workflow-endpoint-content\">\n        <span class=\"ls-workflow-endpoint-icn fa fa fa-2x\" [ngClass]=\"options.startIconClass\"></span>\n        <span class=\"ls-step-bounds-txt\" [innerText]=\"messages.FIRST_STEP_TXT\"></span>\n      </div>\n    </div>\n    <div class=\"steps-container\">\n      <div *ngFor=\"let step of workflowData.steps; index as i\">\n        <div class=\"ls-workflow-display-step-container\">\n          <div class=\"ls-workflow-step\" [ngClass]=\"getStepAdditionalClasses(step, i)\">\n            <div class=\"ls-step-top-line\">\n              <div class=\"step-number\">{{i + 1}}.</div>\n              <div class=\"step-name\">{{step.name}}</div>\n              <div [ngClass]=\"getStepIconClass(step)\" class=\"step-icn fa\" ngbTooltip=\"{{getStepTooltip(step)}}\"></div>\n            </div>\n            <div class=\"ls-display-step-separator\"></div>\n            <div class=\"ls-step-validator-list\" [ngClass]=\"getAdditionalValidatorListClasses\">\n              <ng-container *ngIf=\"isPassed(step)\">\n                <div *ngFor=\"let validator of step.validators\">\n                  <ng-template\n                    [ngTemplateOutlet]=\"passedStepTemplateRef\"\n                    [ngTemplateOutletContext]=\"{step: step, validator: validator}\">\n                  </ng-template>\n                </div>\n              </ng-container>\n              <ng-container *ngIf=\" ! isPassed(step)\">\n                <div *ngFor=\"let validator of step.validators\" class=\"ls-step-validator\">\n                  <ng-template\n                    [ngTemplateOutlet]=\"pendingStepTemplateRef\"\n                    [ngTemplateOutletContext]=\"{step: step, validator: validator}\">\n                  </ng-template>\n                </div>\n              </ng-container>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"ls-workflow-end\" [ngClass]=\"getCircuitEndAdditionalClasses()\">\n      <div class=\"ls-workflow-endpoint-content\">\n        <span class=\"ls-workflow-endpoint-icn fa fa-2x\" [ngClass]=\"options.endIconClass\"></span>\n        <span class=\"ls-step-bounds-txt\" [innerText]=\"messages.LAST_STEP_TXT\"></span>\n      </div>\n    </div>\n  </div>\n</div>\n",
                    styles: ["body{background-color:var(--ls-grey-50)}.active-btn{color:#42a1e8}.ls-workflow-canevas{-ms-grid-column:1;grid-column:1;height:100%;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.ls-workflow-step{background-color:#fff;-webkit-box-shadow:0 0 .25rem rgba(0,0,0,.15);box-shadow:0 0 .25rem rgba(0,0,0,.15);border:none;width:var(--ls-workflow-step-width,20rem);min-height:6rem}.ls-workflow-step .ls-step-top-line{padding:.5rem;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-align:center;-ms-flex-align:center;align-items:center;font-weight:700}.ls-workflow-step .ls-display-step-separator{width:100%;border-bottom:1px solid #d3d3d3}.ls-workflow-step .ls-step-validator-list{padding:.5rem .5rem .5rem 1.5rem;color:#5b5b5b}.ls-workflow-step.selected{-webkit-box-shadow:0 .5rem .25rem rgba(0,0,0,.3);box-shadow:0 .5rem .25rem rgba(0,0,0,.3)}.ls-workflow-step .step-icn{width:1.7rem;height:1.7rem}.ls-workflow-endpoint-content{margin:auto;text-align:center}.ls-workflow-endpoint-content .ls-step-bounds-txt{color:var(--primary);font-weight:700}.ls-workflow-endpoint-content .ls-workflow-endpoint-icn{color:var(--primary)}.ls-workflow-endpoint-content.not-active .ls-step-bounds-txt,.ls-workflow-endpoint-content.not-active .ls-workflow-endpoint-icn{color:#5b5b5b}.ls-workflow-endpoint-content .ls-step-validator-list{text-align:left}.ls-actual-validator{font-weight:700}.ls-actual-validator::before{content:'\\f00c';font-family:var(--ls-font-awesome-family, \"Font Awesome 5 Free\");color:var(--primary);font-size:1em;position:absolute;left:.5em}.ls-rejector{font-weight:700}.ls-rejector::before{content:'\\f00d';font-family:var(--ls-font-awesome-family, \"Font Awesome 5 Free\");color:var(--danger);font-size:1em;position:absolute;left:.5em}.wa-comment-icon{color:var(--primary);font-size:1em;margin-right:.5em}.ls-workflow-display .ls-workflow-step{padding-left:0;padding-right:0;margin:1rem auto}.ls-workflow-display .ls-workflow-step .ls-step-validator-list{padding:1rem 1rem 1rem .5rem}.ls-workflow-display .ls-workflow-step .ls-step-validator-list.ls-workflow-instance{padding-left:2rem}.ls-workflow-display .ls-workflow-step.ls-reduced-step{-webkit-box-shadow:none;box-shadow:none;border:none;background-color:rgba(0,0,0,0);width:var(--ls-workflow-reduced-step-width,16rem);min-height:unset;display:-ms-grid;display:grid;-ms-grid-columns:(1fr)[12];grid-template-columns:repeat(12,1fr);-ms-grid-rows:2em auto;grid-template-rows:2em auto;grid-row-gap:.5em}.ls-workflow-display .ls-workflow-step.ls-reduced-step .ls-step-top-line{grid-column:1/-1;-ms-grid-row:1;grid-row:1;display:-ms-grid;display:grid;-ms-grid-columns:1fr 2fr 9fr;grid-template-columns:1fr 2fr 9fr;-ms-grid-rows:1fr;grid-template-rows:1fr;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0}.ls-workflow-display .ls-workflow-step.ls-reduced-step .ls-step-top-line .step-number{display:none}.ls-workflow-display .ls-workflow-step.ls-reduced-step .ls-step-top-line .step-icn{-ms-grid-column:2;grid-column:2;-ms-grid-row:1;grid-row:1;font-size:24px;margin:auto;width:unset;height:unset}.ls-workflow-display .ls-workflow-step.ls-reduced-step .ls-step-top-line .step-name{-ms-grid-column:3;grid-column:3;-ms-grid-row:1;grid-row:1}.ls-workflow-display .ls-workflow-step.ls-reduced-step .ls-display-step-separator{-ms-grid-column:3;grid-column:3;-ms-grid-row:2;grid-row:2;border-left:1px solid #d3d3d3;border-bottom:0}.ls-workflow-display .ls-workflow-step.ls-reduced-step .ls-step-validator-list{grid-column:4/-1;-ms-grid-row:2;grid-row:2;padding:.5em;font-size:.8rem;font-style:italic;color:#d3d3d3}.ls-workflow-display .ls-workflow-step.ls-reduced-step.ls-validated-step .ls-step-top-line,.ls-workflow-display .ls-workflow-step.ls-reduced-step.ls-validated-step .ls-step-top-line .step-icn.test-icon-class,.ls-workflow-display .ls-workflow-step.ls-reduced-step.ls-validated-step .ls-step-top-line .step-icn.test-icon-class:before{color:#23a237}.ls-workflow-display .reduced-end-step .ls-workflow-endpoint-content .ls-step-bounds-txt{margin-left:1em}.ls-workflow-display .ls-workflow-endpoint-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.ls-workflow-display .ls-workflow-endpoint-content .ls-step-bounds-txt{margin-left:.5rem}.ls-workflow-display .ls-step-top-line{-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start;padding-left:.5rem}.ls-workflow-display .ls-step-top-line .step-name{-webkit-box-flex:1;-ms-flex:1;flex:1;margin-left:.7rem}.ls-workflow-display .ls-workflow-display-step-container{position:relative}.ls-workflow-display .ls-active-step:not(.ls-reduced-step) .ls-step-top-line{background-color:var(--primary);color:#fff;margin:0}.ls-workflow-display .ls-active-step:not(.ls-reduced-step) .ls-step-top-line .step-icn{color:#fff}.ls-workflow-display .ls-active-step::before{content:'\\f061';font-family:var(--ls-font-awesome-family, \"Font Awesome 5 Free\");font-style:normal;font-variant:normal;text-rendering:auto;line-height:1;font-weight:900;color:var(--ls-workflow-arrow-color,var(--primary));font-size:2em;position:absolute;left:-1em}.ls-workflow-display .ls-active-step.end-step::before{font-size:1.2em}.ls-workflow-end{position:relative}"]
                }] }
    ];
    /** @nocollapse */
    LsWorkflowInstanceViewerComponent.ctorParameters = function () { return []; };
    LsWorkflowInstanceViewerComponent.propDecorators = {
        passedStepTemplateRef: [{ type: ContentChild, args: ['passedStepContent',] }],
        pendingStepTemplateRef: [{ type: ContentChild, args: ['pendingStepContent',] }],
        workflowData: [{ type: Input, args: ['src',] }],
        activeStep: [{ type: Input }],
        getStepIconClassFct: [{ type: Input }],
        getStepTooltipFct: [{ type: Input }],
        getCircuitEndAdditionalClassesFct: [{ type: Input }],
        reducedMode: [{ type: Input }],
        options: [{ type: Input }],
        localizedMessages: [{ type: Input }]
    };
    return LsWorkflowInstanceViewerComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: workflows/ls-workflows.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LsWorkflowsModule = /** @class */ (function () {
    // This is for Components with contents
    // public static angularComponents = {
    //   // components
    //   'ls-lib-back-top-top': BackToTopComponent,
    //   'ls-lib-max-length-textarea': MaxLengthTextAreaComponent,
    //   'ls-lib-color-picker': ColorPickerComponent,
    //   'ls-lib-timepicker': TimepickerComponent,
    //   'ls-lib-password': PasswordComponent,
    //
    // };
    function LsWorkflowsModule() {
    }
    LsWorkflowsModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        LsWorkflowEditorComponent,
                        LsWorkflowModelViewerComponent,
                        LsWorkflowInstanceViewerComponent,
                    ],
                    imports: [
                        BrowserModule,
                        CommonModule,
                        BrowserAnimationsModule,
                        FormsModule,
                        NgbModule,
                        DragDropModule
                    ],
                    exports: [
                        LsWorkflowEditorComponent,
                        LsWorkflowModelViewerComponent,
                        LsWorkflowInstanceViewerComponent,
                    ]
                },] }
    ];
    /** @nocollapse */
    LsWorkflowsModule.ctorParameters = function () { return []; };
    return LsWorkflowsModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: shared/model/workflows/step-instance.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StepInstance = /** @class */ (function () {
    function StepInstance(stepInstData) {
        this.validatedBy = [];
        this.id = stepInstData.id;
        this.name = stepInstData.name;
        this.validators = stepInstData.validators ? __spread(stepInstData.validators) : [];
        this.state = stepInstData.state;
        this.validatedBy = stepInstData.actedUponBy ? [stepInstData.actedUponBy] : [];
        this.comment = stepInstData.comment;
        if (stepInstData.actionId) {
            this.id = stepInstData.actionId;
        }
    }
    return StepInstance;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: shared/model/workflows/workflow-actor.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WorkflowActor = /** @class */ (function () {
    function WorkflowActor() {
    }
    return WorkflowActor;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: shared/model/public_workflow_models.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: public_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: libriciel-ls-composants-workflows.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { LsWorkflowsModule, StepInstance, StepState, StepModel, WorkflowActor, WorkflowInstance, WorkflowModel, WorkflowModelOptions, WorkflowModelLocalizedMessages, LsWorkflowEditorComponent as ɵa, LsWorkflowInstanceViewerComponent as ɵc, LsWorkflowModelViewerComponent as ɵb };

//# sourceMappingURL=libriciel-ls-composants-workflows.js.map