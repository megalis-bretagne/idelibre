/**
 * @fileoverview added by tsickle
 * Generated from: shared/model/workflows/workflow-instance.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { StepState } from "./step-state";
export class WorkflowInstance {
    // This constructor is only valid while we use stub services,
    // It should be replace with a constructor from "circuitRaw"
    // constructor(circuitModel: Circuit, stepInstances?: StepInstance[]) {
    /**
     * @param {?=} instData
     */
    constructor(instData) {
        this.currentStepIdx = 0;
        this.rejected = false;
        this.isOver = false;
        this.id = instData.id;
        this.name = instData.name;
        this.description = instData.description;
        this.rejected = instData.isRejected;
        this.isOver = instData.isOver;
        if (instData.steps) {
            this.steps = instData.steps;
            this.currentStepIdx = instData.steps.findIndex((/**
             * @param {?} step
             * @return {?}
             */
            step => step.state === StepState.CURRENT));
            if (this.currentStepIdx === -1) {
                this.currentStepIdx = 0;
            }
        }
    }
}
if (false) {
    /** @type {?} */
    WorkflowInstance.prototype.id;
    /** @type {?} */
    WorkflowInstance.prototype.name;
    /** @type {?} */
    WorkflowInstance.prototype.description;
    /** @type {?} */
    WorkflowInstance.prototype.currentStepIdx;
    /** @type {?} */
    WorkflowInstance.prototype.steps;
    /** @type {?} */
    WorkflowInstance.prototype.rejected;
    /** @type {?} */
    WorkflowInstance.prototype.isOver;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2Zsb3ctaW5zdGFuY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbGlicmljaWVsL2xzLWNvbXBvc2FudHMvd29ya2Zsb3dzLyIsInNvdXJjZXMiOlsic2hhcmVkL21vZGVsL3dvcmtmbG93cy93b3JrZmxvdy1pbnN0YW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFekMsTUFBTSxPQUFPLGdCQUFnQjs7Ozs7OztJQVkzQixZQUFZLFFBT1Q7UUFmSCxtQkFBYyxHQUFHLENBQUMsQ0FBQztRQUVuQixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ2pCLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFjYixJQUFJLENBQUMsRUFBRSxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQzFCLElBQUksQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQztRQUN4QyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUM7UUFDcEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO1FBRTlCLElBQUksUUFBUSxDQUFDLEtBQUssRUFBRTtZQUNsQixJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUM7WUFDNUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVM7Ozs7WUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLE9BQU8sRUFBQyxDQUFDO1lBQ3pGLElBQUksSUFBSSxDQUFDLGNBQWMsS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFDOUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUM7YUFDekI7U0FDRjtJQUNILENBQUM7Q0FDRjs7O0lBbENDLDhCQUFXOztJQUNYLGdDQUFhOztJQUNiLHVDQUFxQjs7SUFDckIsMENBQW1COztJQUNuQixpQ0FBc0I7O0lBQ3RCLG9DQUFpQjs7SUFDakIsa0NBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGVwSW5zdGFuY2UgfSBmcm9tIFwiLi9zdGVwLWluc3RhbmNlXCI7XG5pbXBvcnQgeyBTdGVwU3RhdGUgfSBmcm9tIFwiLi9zdGVwLXN0YXRlXCI7XG5cbmV4cG9ydCBjbGFzcyBXb3JrZmxvd0luc3RhbmNlIHtcbiAgaWQ6IG51bWJlcjtcbiAgbmFtZTogc3RyaW5nO1xuICBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgY3VycmVudFN0ZXBJZHggPSAwO1xuICBzdGVwczogU3RlcEluc3RhbmNlW107XG4gIHJlamVjdGVkID0gZmFsc2U7XG4gIGlzT3ZlciA9IGZhbHNlO1xuXG4gIC8vIFRoaXMgY29uc3RydWN0b3IgaXMgb25seSB2YWxpZCB3aGlsZSB3ZSB1c2Ugc3R1YiBzZXJ2aWNlcyxcbiAgLy8gSXQgc2hvdWxkIGJlIHJlcGxhY2Ugd2l0aCBhIGNvbnN0cnVjdG9yIGZyb20gXCJjaXJjdWl0UmF3XCJcbiAgLy8gY29uc3RydWN0b3IoY2lyY3VpdE1vZGVsOiBDaXJjdWl0LCBzdGVwSW5zdGFuY2VzPzogU3RlcEluc3RhbmNlW10pIHtcbiAgY29uc3RydWN0b3IoaW5zdERhdGE/OiB7XG4gICAgaWQ6IG51bWJlcjtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gICAgc3RlcHM6IFN0ZXBJbnN0YW5jZVtdO1xuICAgIGlzUmVqZWN0ZWQ6IGJvb2xlYW47XG4gICAgaXNPdmVyOiBib29sZWFuO1xuICAgIH1cbiAgKSB7XG4gICAgdGhpcy5pZCA9IGluc3REYXRhLmlkO1xuICAgIHRoaXMubmFtZSA9IGluc3REYXRhLm5hbWU7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGluc3REYXRhLmRlc2NyaXB0aW9uO1xuICAgIHRoaXMucmVqZWN0ZWQgPSBpbnN0RGF0YS5pc1JlamVjdGVkO1xuICAgIHRoaXMuaXNPdmVyID0gaW5zdERhdGEuaXNPdmVyO1xuXG4gICAgaWYgKGluc3REYXRhLnN0ZXBzKSB7XG4gICAgICB0aGlzLnN0ZXBzID0gaW5zdERhdGEuc3RlcHM7XG4gICAgICB0aGlzLmN1cnJlbnRTdGVwSWR4ID0gaW5zdERhdGEuc3RlcHMuZmluZEluZGV4KHN0ZXAgPT4gc3RlcC5zdGF0ZSA9PT0gU3RlcFN0YXRlLkNVUlJFTlQpO1xuICAgICAgaWYgKHRoaXMuY3VycmVudFN0ZXBJZHggPT09IC0xKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFN0ZXBJZHggPSAwO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19