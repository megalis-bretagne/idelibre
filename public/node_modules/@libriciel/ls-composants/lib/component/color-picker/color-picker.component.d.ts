import { AfterViewInit, ElementRef, EventEmitter, Renderer2 } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export declare class ColorPickerComponent implements ControlValueAccessor, AfterViewInit {
    private renderer2;
    private element;
    picker: any;
    slider: any;
    pointer: any;
    input: any;
    size: number;
    changed: EventEmitter<string>;
    isdown: boolean;
    sqIsDown: boolean;
    isHidden: boolean;
    /**
     * The element make an HSV as it's much more easy to calculate with a color picker
     * H : hue
     * S : saturation
     * V : value
     */
    hue: number;
    saturation: number;
    value: number;
    cssprop: string;
    constructor(renderer2: Renderer2, element: ElementRef);
    private _color;
    /*******
     * Define color getter and setter
     */
    get color(): any;
    set color(value: any);
    /*******
     * Define 'id' of input element and remove id of current element
     */
    ngAfterViewInit(): void;
    /**
     * Update color of 'slider' and 'picker' on 'hue' change
     */
    changePickerColor(): void;
    /**
     * Update _color property on change, and emit onChange event for ngModel
     */
    pickerChange(): void;
    /**
     * Set 'slider' position with 'hue' value
     */
    huePosition(): void;
    /**
     * Set 'pointer' position with 'saturation' and 'value' values
     */
    sqPosition(): void;
    /********
     * When we change 'hue' with mouse click, juste go to the position and emit color change
     * @param event the mouse click event
     */
    changeHue(event: any): void;
    defineColor(color: any): void;
    /****
     * Events handlers : mouseup, mousemove and mousedown
     */
    mouseUp(): void;
    mouseMove(event: any): void;
    huemouseDown(): void;
    sqmouseDown(event: any): void;
    /******
     * ngModel required functions
     */
    onChange: any;
    onTouched: any;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    writeValue(value: any): void;
    /*********
     * Utils fonctions, convert HSV <-> RGB
     */
    hsvToRgb(): number[];
    rgbToHsv(R: any, G: any, B: any): void;
}
