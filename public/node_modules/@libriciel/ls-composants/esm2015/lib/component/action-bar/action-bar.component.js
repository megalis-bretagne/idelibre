/**
 * @fileoverview added by tsickle
 * Generated from: lib/component/action-bar/action-bar.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Weight } from '../../ui-concepts/weight';
/**
 * @template T
 */
export class ActionBarComponent {
    constructor() {
        this.primaryActions = { actionItems: [] };
        this.secondaryActions = { actionItems: [] };
        this.otherActions = { actionItems: [] };
        this.needReload = new EventEmitter();
        this.actionResult = new EventEmitter();
        this.weight = Weight;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.secondaryActions.actionItems
            .forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => item.initializeItem()));
        this.primaryActions.actionItems
            .forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => item.initializeItem()));
        this.otherActions.actionItems
            .forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => item.initializeItem()));
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    sendResult($event) {
        this.actionResult.emit($event);
    }
}
ActionBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'ls-action-bar',
                template: "<div\n  *ngIf=\"secondaryActions?.actionItems.length>0 || primaryActions?.actionItems.length>0 || otherActions?.actionItems.length>0\"\n  class=\"ls-action-bar\"\n  role=\"group\">\n  <div *ngIf=\"secondaryActions?.actionItems.length>0\" class=\"ls-action-bar\">\n    <ng-container *ngFor=\"let item of secondaryActions.actionItems; let index = index\">\n      <ls-button (done)=\"sendResult($event)\"\n                 *ngIf=\"item.enabled && item.actionValidator?.isActionValid([argument])\"\n                 [action]=\"item\"\n                 [argument]=\"[argument]\"\n                 [icon]=\"item.icon\"\n                 [style]=\"item.style\"\n                 [title]=\"item.longName\"\n                 [weight]=\"weight.SECONDARY\"\n                 id=\"{{item.name | toSnakeCase}}-secondary\"\n                 lsActionable>\n      </ls-button>\n    </ng-container>\n  </div>\n  <div *ngIf=\"primaryActions?.actionItems.length>0\" class=\"ls-action-bar\">\n    <ng-container *ngFor=\"let item of primaryActions.actionItems; let index = index\">\n      <ls-button (done)=\"sendResult($event)\"\n                 *ngIf=\"item.enabled && item.actionValidator?.isActionValid([argument])\"\n                 [action]=\"item\"\n                 [argument]=\"[argument]\"\n                 [icon]=\"item.icon\"\n                 [style]=\"item.style\"\n                 [title]=\"item.longName\"\n                 [weight]=\"weight.PRIMARY\"\n                 id=\"{{item.name | toSnakeCase}}-primary\"\n                 lsActionable>\n      </ls-button>\n    </ng-container>\n  </div>\n  <div *ngIf=\"otherActions?.actionItems.length>0\" class=\"ls-action-bar\">\n    <ng-container *ngFor=\"let item of otherActions.actionItems; let index = index\">\n      <ls-button (done)=\"sendResult($event)\"\n                 *ngIf=\"item.enabled && item.actionValidator?.isActionValid([argument])\"\n                 [action]=\"item\"\n                 [argument]=\"[argument]\"\n                 [icon]=\"item.icon\"\n                 [style]=\"item.style\"\n                 [title]=\"item.longName\"\n                 [weight]=\"weight.SECONDARY\"\n                 id=\"{{item.name | toSnakeCase}}-other\"\n                 lsActionable>\n      </ls-button>\n    </ng-container>\n  </div>\n</div>\n",
                styles: [".ls-action-bar{display:-webkit-box;display:-ms-flexbox;display:flex}.ls-action-bar>:not(:last-child){margin-right:.5rem}"]
            }] }
];
/** @nocollapse */
ActionBarComponent.ctorParameters = () => [];
ActionBarComponent.propDecorators = {
    primaryActions: [{ type: Input }],
    secondaryActions: [{ type: Input }],
    otherActions: [{ type: Input }],
    argument: [{ type: Input }],
    needReload: [{ type: Output }],
    actionResult: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    ActionBarComponent.prototype.primaryActions;
    /** @type {?} */
    ActionBarComponent.prototype.secondaryActions;
    /** @type {?} */
    ActionBarComponent.prototype.otherActions;
    /** @type {?} */
    ActionBarComponent.prototype.argument;
    /** @type {?} */
    ActionBarComponent.prototype.needReload;
    /** @type {?} */
    ActionBarComponent.prototype.actionResult;
    /** @type {?} */
    ActionBarComponent.prototype.weight;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLWJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiL2J1aWxkcy9vdXRpbHMvY2hhcnRlZ3JhcGhpcXVlL2xpYnJhaXJpZS1hbmd1bGFyL2xpYi9zcmMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50L2FjdGlvbi1iYXIvYWN0aW9uLWJhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9FLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQzs7OztBQVNsRCxNQUFNLE9BQU8sa0JBQWtCO0lBVzdCO1FBVFMsbUJBQWMsR0FBc0IsRUFBQyxXQUFXLEVBQUUsRUFBRSxFQUFDLENBQUM7UUFDdEQscUJBQWdCLEdBQXNCLEVBQUMsV0FBVyxFQUFFLEVBQUUsRUFBQyxDQUFDO1FBQ3hELGlCQUFZLEdBQXNCLEVBQUMsV0FBVyxFQUFFLEVBQUUsRUFBQyxDQUFDO1FBRW5ELGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2hDLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUU1QyxXQUFNLEdBQUcsTUFBTSxDQUFDO0lBR2hCLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVc7YUFDOUIsT0FBTzs7OztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxFQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXO2FBQzVCLE9BQU87Ozs7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsRUFBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVzthQUMxQixPQUFPOzs7O1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEVBQUMsQ0FBQztJQUM1QyxDQUFDOzs7OztJQUVELFVBQVUsQ0FBQyxNQUFXO1FBQ3BCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pDLENBQUM7OztZQTlCRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGVBQWU7Z0JBQ3pCLDJ3RUFBMEM7O2FBRTNDOzs7Ozs2QkFHRSxLQUFLOytCQUNMLEtBQUs7MkJBQ0wsS0FBSzt1QkFDTCxLQUFLO3lCQUNMLE1BQU07MkJBQ04sTUFBTTs7OztJQUxQLDRDQUErRDs7SUFDL0QsOENBQWlFOztJQUNqRSwwQ0FBNkQ7O0lBQzdELHNDQUFxQjs7SUFDckIsd0NBQTBDOztJQUMxQywwQ0FBNEM7O0lBRTVDLG9DQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFdlaWdodCB9IGZyb20gJy4uLy4uL3VpLWNvbmNlcHRzL3dlaWdodCc7XG5pbXBvcnQgeyBIYXNJZCB9IGZyb20gJy4uLy4uL21vZGVsL2hhcy1pZCc7XG5pbXBvcnQgeyBBY3Rpb25JdGVtc1NldCB9IGZyb20gJy4uLy4uL21vZGVsL2FjdGlvbi1pdGVtcy1zZXQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdscy1hY3Rpb24tYmFyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2FjdGlvbi1iYXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9hY3Rpb24tYmFyLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgQWN0aW9uQmFyQ29tcG9uZW50PFQgZXh0ZW5kcyBIYXNJZD4gaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dCgpIHByaW1hcnlBY3Rpb25zOiBBY3Rpb25JdGVtc1NldDxUPiA9IHthY3Rpb25JdGVtczogW119O1xuICBASW5wdXQoKSBzZWNvbmRhcnlBY3Rpb25zOiBBY3Rpb25JdGVtc1NldDxUPiA9IHthY3Rpb25JdGVtczogW119O1xuICBASW5wdXQoKSBvdGhlckFjdGlvbnM6IEFjdGlvbkl0ZW1zU2V0PFQ+ID0ge2FjdGlvbkl0ZW1zOiBbXX07XG4gIEBJbnB1dCgpIGFyZ3VtZW50OiBUO1xuICBAT3V0cHV0KCkgbmVlZFJlbG9hZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIGFjdGlvblJlc3VsdCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICB3ZWlnaHQgPSBXZWlnaHQ7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnNlY29uZGFyeUFjdGlvbnMuYWN0aW9uSXRlbXNcbiAgICAgIC5mb3JFYWNoKGl0ZW0gPT4gaXRlbS5pbml0aWFsaXplSXRlbSgpKTtcbiAgICB0aGlzLnByaW1hcnlBY3Rpb25zLmFjdGlvbkl0ZW1zXG4gICAgICAuZm9yRWFjaChpdGVtID0+IGl0ZW0uaW5pdGlhbGl6ZUl0ZW0oKSk7XG4gICAgdGhpcy5vdGhlckFjdGlvbnMuYWN0aW9uSXRlbXNcbiAgICAgIC5mb3JFYWNoKGl0ZW0gPT4gaXRlbS5pbml0aWFsaXplSXRlbSgpKTtcbiAgfVxuXG4gIHNlbmRSZXN1bHQoJGV2ZW50OiBhbnkpIHtcbiAgICB0aGlzLmFjdGlvblJlc3VsdC5lbWl0KCRldmVudCk7XG4gIH1cbn1cbiJdfQ==