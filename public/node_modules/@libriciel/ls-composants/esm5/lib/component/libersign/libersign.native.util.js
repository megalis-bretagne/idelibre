/**
 * @fileoverview added by tsickle
 * Generated from: lib/component/libersign/libersign.native.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { LibersignUtil } from './libersign.util';
var LibersignNativeUtil = /** @class */ (function (_super) {
    tslib_1.__extends(LibersignNativeUtil, _super);
    function LibersignNativeUtil() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} updateUrl
     * @param {?} appletUrl
     * @return {?}
     */
    LibersignNativeUtil.prototype.init = /**
     * @param {?} updateUrl
     * @param {?} appletUrl
     * @return {?}
     */
    function (updateUrl, appletUrl) {
        this.status.certsLoading = true;
        try {
            LiberSign.setUpdateUrl(updateUrl);
        }
        catch (error) {
            console.log('error catched');
        }
        this.loadCertificates();
    };
    /**
     * @return {?}
     */
    LibersignNativeUtil.prototype.loadCertificates = /**
     * @return {?}
     */
    function () {
        var _this = this;
        LiberSign.getCertificates().then((/**
         * @param {?} cs
         * @return {?}
         */
        function (cs) {
            if (cs !== undefined) {
                _this.certificates = cs;
                _this.selectCertificate(_this.favorite);
                _this.commonLoadCert();
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this.status.certsError = true;
        }));
    };
    /**
     * @param {?} dataToSign
     * @return {?}
     */
    LibersignNativeUtil.prototype.doSign = /**
     * @param {?} dataToSign
     * @return {?}
     */
    function (dataToSign) {
        var _this = this;
        LiberSign.sign(this.currentCert.ID, { dataToSign: dataToSign }).then((/**
         * @param {?} sig
         * @return {?}
         */
        function (sig) {
            _this.signatures.next(sig);
        }));
    };
    /**
     * @param {?} cert
     * @return {?}
     */
    LibersignNativeUtil.prototype.selectCertificate = /**
     * @param {?} cert
     * @return {?}
     */
    function (cert) {
        this.currentCert = cert;
    };
    /**
     * @return {?}
     */
    LibersignNativeUtil.prototype.destroy = /**
     * @return {?}
     */
    function () {
        // Nothing to do here
    };
    return LibersignNativeUtil;
}(LibersignUtil));
export { LibersignNativeUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliZXJzaWduLm5hdGl2ZS51dGlsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGxpYnJpY2llbC9scy1jb21wb3NhbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudC9saWJlcnNpZ24vbGliZXJzaWduLm5hdGl2ZS51dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUsvQztJQUF5QywrQ0FBYTtJQUF0RDs7SUFvQ0EsQ0FBQzs7Ozs7O0lBbkNDLGtDQUFJOzs7OztJQUFKLFVBQUssU0FBaUIsRUFBRSxTQUFpQjtRQUN2QyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDaEMsSUFBSTtZQUNGLFNBQVMsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDbkM7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDOUI7UUFDRCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMxQixDQUFDOzs7O0lBRUQsOENBQWdCOzs7SUFBaEI7UUFBQSxpQkFVQztRQVRDLFNBQVMsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxJQUFJOzs7O1FBQUMsVUFBQyxFQUEwQjtZQUMxRCxJQUFJLEVBQUUsS0FBSyxTQUFTLEVBQUU7Z0JBQ3BCLEtBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO2dCQUN2QixLQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUN0QyxLQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7YUFDdkI7UUFDSCxDQUFDOzs7O1FBQUUsVUFBQSxHQUFHO1lBQ0osS0FBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ2hDLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7SUFFRCxvQ0FBTTs7OztJQUFOLFVBQU8sVUFBb0I7UUFBM0IsaUJBSUM7UUFIQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUMsSUFBSTs7OztRQUFDLFVBQUEsR0FBRztZQUN0RSxLQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1QixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBRUQsK0NBQWlCOzs7O0lBQWpCLFVBQWtCLElBQTBCO1FBQzFDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO0lBQzFCLENBQUM7Ozs7SUFFRCxxQ0FBTzs7O0lBQVA7UUFDRSxxQkFBcUI7SUFDdkIsQ0FBQztJQUNILDBCQUFDO0FBQUQsQ0FBQyxBQXBDRCxDQUF5QyxhQUFhLEdBb0NyRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TGliZXJzaWduVXRpbH0gZnJvbSAnLi9saWJlcnNpZ24udXRpbCc7XG5pbXBvcnQge0xpYmVyc2lnbkNlcnRpZmljYXRlfSBmcm9tICcuL2NlcnRpZmljYXRlLm1vZGVsJztcblxuZGVjbGFyZSB2YXIgTGliZXJTaWduOiBhbnk7XG5cbmV4cG9ydCBjbGFzcyBMaWJlcnNpZ25OYXRpdmVVdGlsIGV4dGVuZHMgTGliZXJzaWduVXRpbCB7XG4gIGluaXQodXBkYXRlVXJsOiBzdHJpbmcsIGFwcGxldFVybDogc3RyaW5nKSB7XG4gICAgdGhpcy5zdGF0dXMuY2VydHNMb2FkaW5nID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgTGliZXJTaWduLnNldFVwZGF0ZVVybCh1cGRhdGVVcmwpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZygnZXJyb3IgY2F0Y2hlZCcpO1xuICAgIH1cbiAgICB0aGlzLmxvYWRDZXJ0aWZpY2F0ZXMoKTtcbiAgfVxuXG4gIGxvYWRDZXJ0aWZpY2F0ZXMoKSB7XG4gICAgTGliZXJTaWduLmdldENlcnRpZmljYXRlcygpLnRoZW4oKGNzOiBbTGliZXJzaWduQ2VydGlmaWNhdGVdKSA9PiB7XG4gICAgICBpZiAoY3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmNlcnRpZmljYXRlcyA9IGNzO1xuICAgICAgICB0aGlzLnNlbGVjdENlcnRpZmljYXRlKHRoaXMuZmF2b3JpdGUpO1xuICAgICAgICB0aGlzLmNvbW1vbkxvYWRDZXJ0KCk7XG4gICAgICB9XG4gICAgfSwgZXJyID0+IHtcbiAgICAgIHRoaXMuc3RhdHVzLmNlcnRzRXJyb3IgPSB0cnVlO1xuICAgIH0pO1xuICB9XG5cbiAgZG9TaWduKGRhdGFUb1NpZ246IHN0cmluZ1tdKSB7XG4gICAgTGliZXJTaWduLnNpZ24odGhpcy5jdXJyZW50Q2VydC5JRCwgeyBkYXRhVG9TaWduOiBkYXRhVG9TaWduIH0pLnRoZW4oc2lnID0+IHtcbiAgICAgIHRoaXMuc2lnbmF0dXJlcy5uZXh0KHNpZyk7XG4gICAgfSk7XG4gIH1cblxuICBzZWxlY3RDZXJ0aWZpY2F0ZShjZXJ0OiBMaWJlcnNpZ25DZXJ0aWZpY2F0ZSkge1xuICAgIHRoaXMuY3VycmVudENlcnQgPSBjZXJ0O1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICAvLyBOb3RoaW5nIHRvIGRvIGhlcmVcbiAgfVxufVxuIl19