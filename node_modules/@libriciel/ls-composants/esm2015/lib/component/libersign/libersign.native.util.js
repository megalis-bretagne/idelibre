/**
 * @fileoverview added by tsickle
 * Generated from: lib/component/libersign/libersign.native.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LibersignUtil } from './libersign.util';
export class LibersignNativeUtil extends LibersignUtil {
    /**
     * @param {?} updateUrl
     * @param {?} appletUrl
     * @return {?}
     */
    init(updateUrl, appletUrl) {
        this.status.certsLoading = true;
        try {
            LiberSign.setUpdateUrl(updateUrl);
        }
        catch (error) {
            console.log('error catched');
        }
        this.loadCertificates();
    }
    /**
     * @return {?}
     */
    loadCertificates() {
        LiberSign.getCertificates().then((/**
         * @param {?} cs
         * @return {?}
         */
        (cs) => {
            if (cs !== undefined) {
                this.certificates = cs;
                this.selectCertificate(this.favorite);
                this.commonLoadCert();
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        err => {
            this.status.certsError = true;
        }));
    }
    /**
     * @param {?} dataToSign
     * @return {?}
     */
    doSign(dataToSign) {
        LiberSign.sign(this.currentCert.ID, { dataToSign: dataToSign }).then((/**
         * @param {?} sig
         * @return {?}
         */
        sig => {
            this.signatures.next(sig);
        }));
    }
    /**
     * @param {?} cert
     * @return {?}
     */
    selectCertificate(cert) {
        this.currentCert = cert;
    }
    /**
     * @return {?}
     */
    destroy() {
        // Nothing to do here
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliZXJzaWduLm5hdGl2ZS51dGlsLmpzIiwic291cmNlUm9vdCI6Ii9idWlsZHMvb3V0aWxzL2NoYXJ0ZWdyYXBoaXF1ZS9saWJyYWlyaWUtYW5ndWxhci9saWIvc3JjLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudC9saWJlcnNpZ24vbGliZXJzaWduLm5hdGl2ZS51dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBSy9DLE1BQU0sT0FBTyxtQkFBb0IsU0FBUSxhQUFhOzs7Ozs7SUFDcEQsSUFBSSxDQUFDLFNBQWlCLEVBQUUsU0FBaUI7UUFDdkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ2hDLElBQUk7WUFDRixTQUFTLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ25DO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQzlCO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDMUIsQ0FBQzs7OztJQUVELGdCQUFnQjtRQUNkLFNBQVMsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxJQUFJOzs7O1FBQUMsQ0FBQyxFQUEwQixFQUFFLEVBQUU7WUFDOUQsSUFBSSxFQUFFLEtBQUssU0FBUyxFQUFFO2dCQUNwQixJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztnQkFDdkIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDdEMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO2FBQ3ZCO1FBQ0gsQ0FBQzs7OztRQUFFLEdBQUcsQ0FBQyxFQUFFO1lBQ1AsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ2hDLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7SUFFRCxNQUFNLENBQUMsVUFBb0I7UUFDekIsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLElBQUk7Ozs7UUFBQyxHQUFHLENBQUMsRUFBRTtZQUN6RSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1QixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBRUQsaUJBQWlCLENBQUMsSUFBMEI7UUFDMUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7SUFDMUIsQ0FBQzs7OztJQUVELE9BQU87UUFDTCxxQkFBcUI7SUFDdkIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtMaWJlcnNpZ25VdGlsfSBmcm9tICcuL2xpYmVyc2lnbi51dGlsJztcbmltcG9ydCB7TGliZXJzaWduQ2VydGlmaWNhdGV9IGZyb20gJy4vY2VydGlmaWNhdGUubW9kZWwnO1xuXG5kZWNsYXJlIHZhciBMaWJlclNpZ246IGFueTtcblxuZXhwb3J0IGNsYXNzIExpYmVyc2lnbk5hdGl2ZVV0aWwgZXh0ZW5kcyBMaWJlcnNpZ25VdGlsIHtcbiAgaW5pdCh1cGRhdGVVcmw6IHN0cmluZywgYXBwbGV0VXJsOiBzdHJpbmcpIHtcbiAgICB0aGlzLnN0YXR1cy5jZXJ0c0xvYWRpbmcgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICBMaWJlclNpZ24uc2V0VXBkYXRlVXJsKHVwZGF0ZVVybCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdlcnJvciBjYXRjaGVkJyk7XG4gICAgfVxuICAgIHRoaXMubG9hZENlcnRpZmljYXRlcygpO1xuICB9XG5cbiAgbG9hZENlcnRpZmljYXRlcygpIHtcbiAgICBMaWJlclNpZ24uZ2V0Q2VydGlmaWNhdGVzKCkudGhlbigoY3M6IFtMaWJlcnNpZ25DZXJ0aWZpY2F0ZV0pID0+IHtcbiAgICAgIGlmIChjcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuY2VydGlmaWNhdGVzID0gY3M7XG4gICAgICAgIHRoaXMuc2VsZWN0Q2VydGlmaWNhdGUodGhpcy5mYXZvcml0ZSk7XG4gICAgICAgIHRoaXMuY29tbW9uTG9hZENlcnQoKTtcbiAgICAgIH1cbiAgICB9LCBlcnIgPT4ge1xuICAgICAgdGhpcy5zdGF0dXMuY2VydHNFcnJvciA9IHRydWU7XG4gICAgfSk7XG4gIH1cblxuICBkb1NpZ24oZGF0YVRvU2lnbjogc3RyaW5nW10pIHtcbiAgICBMaWJlclNpZ24uc2lnbih0aGlzLmN1cnJlbnRDZXJ0LklELCB7IGRhdGFUb1NpZ246IGRhdGFUb1NpZ24gfSkudGhlbihzaWcgPT4ge1xuICAgICAgdGhpcy5zaWduYXR1cmVzLm5leHQoc2lnKTtcbiAgICB9KTtcbiAgfVxuXG4gIHNlbGVjdENlcnRpZmljYXRlKGNlcnQ6IExpYmVyc2lnbkNlcnRpZmljYXRlKSB7XG4gICAgdGhpcy5jdXJyZW50Q2VydCA9IGNlcnQ7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIC8vIE5vdGhpbmcgdG8gZG8gaGVyZVxuICB9XG59XG4iXX0=